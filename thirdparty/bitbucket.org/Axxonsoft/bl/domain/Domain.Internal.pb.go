// Code generated by protoc-gen-go. DO NOT EDIT.
// source: axxonsoft/bl/domain/Domain.Internal.proto

package domain // import "bitbucket.org/Axxonsoft/bl/domain"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import events "bitbucket.org/Axxonsoft/bl/events"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetSelfInfoRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSelfInfoRequest) Reset()         { *m = GetSelfInfoRequest{} }
func (m *GetSelfInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetSelfInfoRequest) ProtoMessage()    {}
func (*GetSelfInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_Domain_Internal_2a34d791d760a8a0, []int{0}
}
func (m *GetSelfInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSelfInfoRequest.Unmarshal(m, b)
}
func (m *GetSelfInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSelfInfoRequest.Marshal(b, m, deterministic)
}
func (dst *GetSelfInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSelfInfoRequest.Merge(dst, src)
}
func (m *GetSelfInfoRequest) XXX_Size() int {
	return xxx_messageInfo_GetSelfInfoRequest.Size(m)
}
func (m *GetSelfInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSelfInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSelfInfoRequest proto.InternalMessageInfo

type GetSelfInfoResponse struct {
	Status               *events.HostStatus `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Certificate          string             `protobuf:"bytes,2,opt,name=certificate" json:"certificate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GetSelfInfoResponse) Reset()         { *m = GetSelfInfoResponse{} }
func (m *GetSelfInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetSelfInfoResponse) ProtoMessage()    {}
func (*GetSelfInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_Domain_Internal_2a34d791d760a8a0, []int{1}
}
func (m *GetSelfInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSelfInfoResponse.Unmarshal(m, b)
}
func (m *GetSelfInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSelfInfoResponse.Marshal(b, m, deterministic)
}
func (dst *GetSelfInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSelfInfoResponse.Merge(dst, src)
}
func (m *GetSelfInfoResponse) XXX_Size() int {
	return xxx_messageInfo_GetSelfInfoResponse.Size(m)
}
func (m *GetSelfInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSelfInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSelfInfoResponse proto.InternalMessageInfo

func (m *GetSelfInfoResponse) GetStatus() *events.HostStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *GetSelfInfoResponse) GetCertificate() string {
	if m != nil {
		return m.Certificate
	}
	return ""
}

func init() {
	proto.RegisterType((*GetSelfInfoRequest)(nil), "axxonsoft.bl.domain.GetSelfInfoRequest")
	proto.RegisterType((*GetSelfInfoResponse)(nil), "axxonsoft.bl.domain.GetSelfInfoResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NgpNodeService service

type NgpNodeServiceClient interface {
	ListCameras(ctx context.Context, in *ListCamerasRequest, opts ...grpc.CallOption) (*ListCamerasResponse, error)
	BatchGetCameras(ctx context.Context, in *BatchGetCamerasRequest, opts ...grpc.CallOption) (*BatchGetCamerasResponse, error)
	GetCamerasByComponents(ctx context.Context, in *GetCamerasByComponentsRequest, opts ...grpc.CallOption) (*GetCamerasByComponentsResponse, error)
	ListArchives(ctx context.Context, in *ListArchivesRequest, opts ...grpc.CallOption) (*ListArchivesResponse, error)
	BatchGetArchives(ctx context.Context, in *BatchGetArchivesRequest, opts ...grpc.CallOption) (*BatchGetArchivesResponse, error)
	ListControlPanels(ctx context.Context, in *ListControlPanelsRequest, opts ...grpc.CallOption) (*ListControlPanelsResponse, error)
	BatchGetControlPanels(ctx context.Context, in *BatchGetControlPanelsRequest, opts ...grpc.CallOption) (*BatchGetControlPanelsResponse, error)
	// Get full host info including certificates and other heavy data
	GetSelfInfo(ctx context.Context, in *GetSelfInfoRequest, opts ...grpc.CallOption) (*GetSelfInfoResponse, error)
}

type ngpNodeServiceClient struct {
	cc *grpc.ClientConn
}

func NewNgpNodeServiceClient(cc *grpc.ClientConn) NgpNodeServiceClient {
	return &ngpNodeServiceClient{cc}
}

func (c *ngpNodeServiceClient) ListCameras(ctx context.Context, in *ListCamerasRequest, opts ...grpc.CallOption) (*ListCamerasResponse, error) {
	out := new(ListCamerasResponse)
	err := grpc.Invoke(ctx, "/axxonsoft.bl.domain.NgpNodeService/ListCameras", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ngpNodeServiceClient) BatchGetCameras(ctx context.Context, in *BatchGetCamerasRequest, opts ...grpc.CallOption) (*BatchGetCamerasResponse, error) {
	out := new(BatchGetCamerasResponse)
	err := grpc.Invoke(ctx, "/axxonsoft.bl.domain.NgpNodeService/BatchGetCameras", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ngpNodeServiceClient) GetCamerasByComponents(ctx context.Context, in *GetCamerasByComponentsRequest, opts ...grpc.CallOption) (*GetCamerasByComponentsResponse, error) {
	out := new(GetCamerasByComponentsResponse)
	err := grpc.Invoke(ctx, "/axxonsoft.bl.domain.NgpNodeService/GetCamerasByComponents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ngpNodeServiceClient) ListArchives(ctx context.Context, in *ListArchivesRequest, opts ...grpc.CallOption) (*ListArchivesResponse, error) {
	out := new(ListArchivesResponse)
	err := grpc.Invoke(ctx, "/axxonsoft.bl.domain.NgpNodeService/ListArchives", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ngpNodeServiceClient) BatchGetArchives(ctx context.Context, in *BatchGetArchivesRequest, opts ...grpc.CallOption) (*BatchGetArchivesResponse, error) {
	out := new(BatchGetArchivesResponse)
	err := grpc.Invoke(ctx, "/axxonsoft.bl.domain.NgpNodeService/BatchGetArchives", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ngpNodeServiceClient) ListControlPanels(ctx context.Context, in *ListControlPanelsRequest, opts ...grpc.CallOption) (*ListControlPanelsResponse, error) {
	out := new(ListControlPanelsResponse)
	err := grpc.Invoke(ctx, "/axxonsoft.bl.domain.NgpNodeService/ListControlPanels", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ngpNodeServiceClient) BatchGetControlPanels(ctx context.Context, in *BatchGetControlPanelsRequest, opts ...grpc.CallOption) (*BatchGetControlPanelsResponse, error) {
	out := new(BatchGetControlPanelsResponse)
	err := grpc.Invoke(ctx, "/axxonsoft.bl.domain.NgpNodeService/BatchGetControlPanels", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ngpNodeServiceClient) GetSelfInfo(ctx context.Context, in *GetSelfInfoRequest, opts ...grpc.CallOption) (*GetSelfInfoResponse, error) {
	out := new(GetSelfInfoResponse)
	err := grpc.Invoke(ctx, "/axxonsoft.bl.domain.NgpNodeService/GetSelfInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NgpNodeService service

type NgpNodeServiceServer interface {
	ListCameras(context.Context, *ListCamerasRequest) (*ListCamerasResponse, error)
	BatchGetCameras(context.Context, *BatchGetCamerasRequest) (*BatchGetCamerasResponse, error)
	GetCamerasByComponents(context.Context, *GetCamerasByComponentsRequest) (*GetCamerasByComponentsResponse, error)
	ListArchives(context.Context, *ListArchivesRequest) (*ListArchivesResponse, error)
	BatchGetArchives(context.Context, *BatchGetArchivesRequest) (*BatchGetArchivesResponse, error)
	ListControlPanels(context.Context, *ListControlPanelsRequest) (*ListControlPanelsResponse, error)
	BatchGetControlPanels(context.Context, *BatchGetControlPanelsRequest) (*BatchGetControlPanelsResponse, error)
	// Get full host info including certificates and other heavy data
	GetSelfInfo(context.Context, *GetSelfInfoRequest) (*GetSelfInfoResponse, error)
}

func RegisterNgpNodeServiceServer(s *grpc.Server, srv NgpNodeServiceServer) {
	s.RegisterService(&_NgpNodeService_serviceDesc, srv)
}

func _NgpNodeService_ListCameras_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCamerasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NgpNodeServiceServer).ListCameras(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axxonsoft.bl.domain.NgpNodeService/ListCameras",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NgpNodeServiceServer).ListCameras(ctx, req.(*ListCamerasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NgpNodeService_BatchGetCameras_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetCamerasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NgpNodeServiceServer).BatchGetCameras(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axxonsoft.bl.domain.NgpNodeService/BatchGetCameras",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NgpNodeServiceServer).BatchGetCameras(ctx, req.(*BatchGetCamerasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NgpNodeService_GetCamerasByComponents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCamerasByComponentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NgpNodeServiceServer).GetCamerasByComponents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axxonsoft.bl.domain.NgpNodeService/GetCamerasByComponents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NgpNodeServiceServer).GetCamerasByComponents(ctx, req.(*GetCamerasByComponentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NgpNodeService_ListArchives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArchivesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NgpNodeServiceServer).ListArchives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axxonsoft.bl.domain.NgpNodeService/ListArchives",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NgpNodeServiceServer).ListArchives(ctx, req.(*ListArchivesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NgpNodeService_BatchGetArchives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetArchivesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NgpNodeServiceServer).BatchGetArchives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axxonsoft.bl.domain.NgpNodeService/BatchGetArchives",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NgpNodeServiceServer).BatchGetArchives(ctx, req.(*BatchGetArchivesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NgpNodeService_ListControlPanels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListControlPanelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NgpNodeServiceServer).ListControlPanels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axxonsoft.bl.domain.NgpNodeService/ListControlPanels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NgpNodeServiceServer).ListControlPanels(ctx, req.(*ListControlPanelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NgpNodeService_BatchGetControlPanels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetControlPanelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NgpNodeServiceServer).BatchGetControlPanels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axxonsoft.bl.domain.NgpNodeService/BatchGetControlPanels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NgpNodeServiceServer).BatchGetControlPanels(ctx, req.(*BatchGetControlPanelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NgpNodeService_GetSelfInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSelfInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NgpNodeServiceServer).GetSelfInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axxonsoft.bl.domain.NgpNodeService/GetSelfInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NgpNodeServiceServer).GetSelfInfo(ctx, req.(*GetSelfInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NgpNodeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "axxonsoft.bl.domain.NgpNodeService",
	HandlerType: (*NgpNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCameras",
			Handler:    _NgpNodeService_ListCameras_Handler,
		},
		{
			MethodName: "BatchGetCameras",
			Handler:    _NgpNodeService_BatchGetCameras_Handler,
		},
		{
			MethodName: "GetCamerasByComponents",
			Handler:    _NgpNodeService_GetCamerasByComponents_Handler,
		},
		{
			MethodName: "ListArchives",
			Handler:    _NgpNodeService_ListArchives_Handler,
		},
		{
			MethodName: "BatchGetArchives",
			Handler:    _NgpNodeService_BatchGetArchives_Handler,
		},
		{
			MethodName: "ListControlPanels",
			Handler:    _NgpNodeService_ListControlPanels_Handler,
		},
		{
			MethodName: "BatchGetControlPanels",
			Handler:    _NgpNodeService_BatchGetControlPanels_Handler,
		},
		{
			MethodName: "GetSelfInfo",
			Handler:    _NgpNodeService_GetSelfInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "axxonsoft/bl/domain/Domain.Internal.proto",
}

func init() {
	proto.RegisterFile("axxonsoft/bl/domain/Domain.Internal.proto", fileDescriptor_Domain_Internal_2a34d791d760a8a0)
}

var fileDescriptor_Domain_Internal_2a34d791d760a8a0 = []byte{
	// 410 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x4f, 0xef, 0xd2, 0x30,
	0x18, 0xc7, 0x33, 0x0f, 0x3f, 0x63, 0x67, 0xfc, 0x53, 0xd4, 0x10, 0x2e, 0x4e, 0x3c, 0x08, 0x51,
	0xba, 0x38, 0x0e, 0x9e, 0x01, 0x0d, 0x92, 0x18, 0x62, 0xe0, 0xe6, 0x89, 0x6e, 0x3c, 0x83, 0xc5,
	0xd1, 0xce, 0xf6, 0x81, 0xe0, 0xc5, 0xc4, 0x77, 0xe0, 0x4b, 0x36, 0x8c, 0x6e, 0x0e, 0xd8, 0x70,
	0x9c, 0x96, 0x34, 0x9f, 0xa7, 0x9f, 0x67, 0xdf, 0xf6, 0x29, 0xe9, 0xf2, 0xfd, 0x5e, 0x0a, 0x2d,
	0x43, 0x74, 0xfd, 0xd8, 0x5d, 0xca, 0x0d, 0x8f, 0x84, 0xfb, 0x31, 0xfd, 0xb0, 0x89, 0x40, 0x50,
	0x82, 0xc7, 0x2c, 0x51, 0x12, 0x25, 0x6d, 0xe4, 0x28, 0xf3, 0x63, 0x76, 0x44, 0x5b, 0xce, 0x95,
	0xfa, 0xb4, 0xec, 0x8c, 0x80, 0x1d, 0x08, 0xd4, 0xee, 0xa7, 0xf4, 0x73, 0x24, 0xda, 0xcf, 0x08,
	0x1d, 0x03, 0xce, 0x21, 0x0e, 0x27, 0x22, 0x94, 0x33, 0xf8, 0xb1, 0x05, 0x8d, 0xed, 0x84, 0x34,
	0x4e, 0x56, 0x75, 0x22, 0x85, 0x06, 0xfa, 0x81, 0xdc, 0x69, 0xe4, 0xb8, 0xd5, 0x4d, 0xcb, 0xb1,
	0x3a, 0xb6, 0xf7, 0x92, 0x9d, 0xb4, 0x75, 0xdc, 0x9f, 0x7d, 0x96, 0x1a, 0xe7, 0x29, 0x36, 0x33,
	0x38, 0x75, 0x88, 0x1d, 0x80, 0xc2, 0x28, 0x8c, 0x02, 0x8e, 0xd0, 0xbc, 0xe7, 0x58, 0x9d, 0x07,
	0xb3, 0xe2, 0x92, 0xf7, 0xe7, 0x3e, 0x79, 0x34, 0x5d, 0x25, 0x53, 0xb9, 0x84, 0x39, 0xa8, 0x5d,
	0x14, 0x00, 0x5d, 0x10, 0xfb, 0x4b, 0xa4, 0x71, 0xc4, 0x37, 0xa0, 0xb8, 0xa6, 0x6f, 0x58, 0x49,
	0x06, 0xac, 0x40, 0x98, 0xe6, 0x5b, 0x9d, 0xff, 0x83, 0xe6, 0x7f, 0x62, 0xf2, 0x78, 0xc8, 0x31,
	0x58, 0x8f, 0x21, 0xb7, 0xbc, 0x2d, 0x2d, 0x3e, 0xa3, 0x32, 0xd3, 0xbb, 0x7a, 0xb0, 0xb1, 0xfd,
	0xb6, 0xc8, 0x8b, 0x7f, 0xcb, 0xc3, 0x9f, 0x23, 0xb9, 0x49, 0xa4, 0x38, 0x44, 0x46, 0xbd, 0xd2,
	0x8d, 0xca, 0xe1, 0x4c, 0xde, 0xbf, 0xa9, 0xc6, 0xf4, 0x10, 0x90, 0x87, 0x87, 0x20, 0x06, 0x2a,
	0x58, 0x47, 0x3b, 0xd0, 0xb4, 0x3a, 0xab, 0x0c, 0xc9, 0x74, 0xdd, 0x1a, 0xa4, 0x91, 0x48, 0xf2,
	0x24, 0xcb, 0x20, 0x17, 0x5d, 0x8f, 0xea, 0x5c, 0xd6, 0xab, 0x49, 0x1b, 0xa1, 0x22, 0x4f, 0xd3,
	0xe3, 0x95, 0x02, 0x95, 0x8c, 0xbf, 0x72, 0x01, 0xb1, 0xa6, 0xbd, 0xea, 0x6b, 0x50, 0xe4, 0x32,
	0x25, 0xab, 0x8b, 0x1b, 0xe7, 0x2f, 0xf2, 0x3c, 0x3f, 0xe8, 0x13, 0xef, 0xfb, 0xeb, 0x97, 0xa2,
	0xcc, 0xed, 0xdd, 0x52, 0x62, 0xfc, 0x0b, 0x62, 0x17, 0x46, 0xb4, 0x62, 0x3a, 0x2e, 0x47, 0xbb,
	0x62, 0x3a, 0x4a, 0xa6, 0x7d, 0xf8, 0xfa, 0xdb, 0x2b, 0x3f, 0x42, 0x7f, 0x1b, 0x7c, 0x07, 0x64,
	0x52, 0xad, 0xdc, 0xc1, 0xe5, 0x73, 0xe3, 0xdf, 0xa5, 0xcf, 0x48, 0xff, 0x6f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x2d, 0x2c, 0x0b, 0x57, 0xcc, 0x04, 0x00, 0x00,
}
