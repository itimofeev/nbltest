// Code generated by protoc-gen-go. DO NOT EDIT.
// source: axxonsoft/bl/heatmap/HeatMap.proto

package heatmap // import "bitbucket.org/Axxonsoft/bl/heatmap"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import primitive "bitbucket.org/Axxonsoft/bl/primitive"
import _ "google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EResultType int32

const (
	EResultType_RESULT_TYPE_DATA  EResultType = 0
	EResultType_RESULT_TYPE_IMAGE EResultType = 1
	EResultType_RESULT_TYPE_FULL  EResultType = 2
)

var EResultType_name = map[int32]string{
	0: "RESULT_TYPE_DATA",
	1: "RESULT_TYPE_IMAGE",
	2: "RESULT_TYPE_FULL",
}
var EResultType_value = map[string]int32{
	"RESULT_TYPE_DATA":  0,
	"RESULT_TYPE_IMAGE": 1,
	"RESULT_TYPE_FULL":  2,
}

func (x EResultType) String() string {
	return proto.EnumName(EResultType_name, int32(x))
}
func (EResultType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_HeatMap_928829ba8fdbca54, []int{0}
}

type BuildHeatmapRequest struct {
	AccessPoint          string             `protobuf:"bytes,1,opt,name=access_point,json=accessPoint" json:"access_point,omitempty"`
	Camera_ID            string             `protobuf:"bytes,2,opt,name=camera_ID,json=cameraID" json:"camera_ID,omitempty"`
	DtPosixStartTime     string             `protobuf:"bytes,3,opt,name=dt_posix_start_time,json=dtPosixStartTime" json:"dt_posix_start_time,omitempty"`
	DtPosixEndTime       string             `protobuf:"bytes,4,opt,name=dt_posix_end_time,json=dtPosixEndTime" json:"dt_posix_end_time,omitempty"`
	Query                string             `protobuf:"bytes,5,opt,name=query" json:"query,omitempty"`
	MaskSize             *primitive.SizeInt `protobuf:"bytes,6,opt,name=mask_size,json=maskSize" json:"mask_size,omitempty"`
	ResultType           EResultType        `protobuf:"varint,7,opt,name=result_type,json=resultType,enum=axxonsoft.bl.heatmap.EResultType" json:"result_type,omitempty"`
	ImageSize            *primitive.SizeInt `protobuf:"bytes,8,opt,name=image_size,json=imageSize" json:"image_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *BuildHeatmapRequest) Reset()         { *m = BuildHeatmapRequest{} }
func (m *BuildHeatmapRequest) String() string { return proto.CompactTextString(m) }
func (*BuildHeatmapRequest) ProtoMessage()    {}
func (*BuildHeatmapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_HeatMap_928829ba8fdbca54, []int{0}
}
func (m *BuildHeatmapRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildHeatmapRequest.Unmarshal(m, b)
}
func (m *BuildHeatmapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildHeatmapRequest.Marshal(b, m, deterministic)
}
func (dst *BuildHeatmapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildHeatmapRequest.Merge(dst, src)
}
func (m *BuildHeatmapRequest) XXX_Size() int {
	return xxx_messageInfo_BuildHeatmapRequest.Size(m)
}
func (m *BuildHeatmapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildHeatmapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BuildHeatmapRequest proto.InternalMessageInfo

func (m *BuildHeatmapRequest) GetAccessPoint() string {
	if m != nil {
		return m.AccessPoint
	}
	return ""
}

func (m *BuildHeatmapRequest) GetCamera_ID() string {
	if m != nil {
		return m.Camera_ID
	}
	return ""
}

func (m *BuildHeatmapRequest) GetDtPosixStartTime() string {
	if m != nil {
		return m.DtPosixStartTime
	}
	return ""
}

func (m *BuildHeatmapRequest) GetDtPosixEndTime() string {
	if m != nil {
		return m.DtPosixEndTime
	}
	return ""
}

func (m *BuildHeatmapRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *BuildHeatmapRequest) GetMaskSize() *primitive.SizeInt {
	if m != nil {
		return m.MaskSize
	}
	return nil
}

func (m *BuildHeatmapRequest) GetResultType() EResultType {
	if m != nil {
		return m.ResultType
	}
	return EResultType_RESULT_TYPE_DATA
}

func (m *BuildHeatmapRequest) GetImageSize() *primitive.SizeInt {
	if m != nil {
		return m.ImageSize
	}
	return nil
}

type BuildHeatmapResponse struct {
	Result               bool     `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Heatmap              []uint32 `protobuf:"varint,2,rep,packed,name=heatmap" json:"heatmap,omitempty"`
	ImageData            []byte   `protobuf:"bytes,3,opt,name=image_data,json=imageData,proto3" json:"image_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BuildHeatmapResponse) Reset()         { *m = BuildHeatmapResponse{} }
func (m *BuildHeatmapResponse) String() string { return proto.CompactTextString(m) }
func (*BuildHeatmapResponse) ProtoMessage()    {}
func (*BuildHeatmapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_HeatMap_928829ba8fdbca54, []int{1}
}
func (m *BuildHeatmapResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BuildHeatmapResponse.Unmarshal(m, b)
}
func (m *BuildHeatmapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BuildHeatmapResponse.Marshal(b, m, deterministic)
}
func (dst *BuildHeatmapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildHeatmapResponse.Merge(dst, src)
}
func (m *BuildHeatmapResponse) XXX_Size() int {
	return xxx_messageInfo_BuildHeatmapResponse.Size(m)
}
func (m *BuildHeatmapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildHeatmapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BuildHeatmapResponse proto.InternalMessageInfo

func (m *BuildHeatmapResponse) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

func (m *BuildHeatmapResponse) GetHeatmap() []uint32 {
	if m != nil {
		return m.Heatmap
	}
	return nil
}

func (m *BuildHeatmapResponse) GetImageData() []byte {
	if m != nil {
		return m.ImageData
	}
	return nil
}

func init() {
	proto.RegisterType((*BuildHeatmapRequest)(nil), "axxonsoft.bl.heatmap.BuildHeatmapRequest")
	proto.RegisterType((*BuildHeatmapResponse)(nil), "axxonsoft.bl.heatmap.BuildHeatmapResponse")
	proto.RegisterEnum("axxonsoft.bl.heatmap.EResultType", EResultType_name, EResultType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HeatMapService service

type HeatMapServiceClient interface {
	// interface HeatMapBuilder
	BuildHeatmap(ctx context.Context, in *BuildHeatmapRequest, opts ...grpc.CallOption) (*BuildHeatmapResponse, error)
}

type heatMapServiceClient struct {
	cc *grpc.ClientConn
}

func NewHeatMapServiceClient(cc *grpc.ClientConn) HeatMapServiceClient {
	return &heatMapServiceClient{cc}
}

func (c *heatMapServiceClient) BuildHeatmap(ctx context.Context, in *BuildHeatmapRequest, opts ...grpc.CallOption) (*BuildHeatmapResponse, error) {
	out := new(BuildHeatmapResponse)
	err := grpc.Invoke(ctx, "/axxonsoft.bl.heatmap.HeatMapService/BuildHeatmap", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HeatMapService service

type HeatMapServiceServer interface {
	// interface HeatMapBuilder
	BuildHeatmap(context.Context, *BuildHeatmapRequest) (*BuildHeatmapResponse, error)
}

func RegisterHeatMapServiceServer(s *grpc.Server, srv HeatMapServiceServer) {
	s.RegisterService(&_HeatMapService_serviceDesc, srv)
}

func _HeatMapService_BuildHeatmap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildHeatmapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HeatMapServiceServer).BuildHeatmap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axxonsoft.bl.heatmap.HeatMapService/BuildHeatmap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HeatMapServiceServer).BuildHeatmap(ctx, req.(*BuildHeatmapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HeatMapService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "axxonsoft.bl.heatmap.HeatMapService",
	HandlerType: (*HeatMapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuildHeatmap",
			Handler:    _HeatMapService_BuildHeatmap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "axxonsoft/bl/heatmap/HeatMap.proto",
}

func init() {
	proto.RegisterFile("axxonsoft/bl/heatmap/HeatMap.proto", fileDescriptor_HeatMap_928829ba8fdbca54)
}

var fileDescriptor_HeatMap_928829ba8fdbca54 = []byte{
	// 487 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x51, 0x6f, 0xda, 0x30,
	0x10, 0xc7, 0x07, 0xac, 0x14, 0x0e, 0x86, 0xa8, 0xcb, 0xa6, 0x88, 0x6d, 0x1a, 0x45, 0x93, 0x46,
	0x2b, 0x2d, 0x91, 0xd8, 0xeb, 0x34, 0x09, 0x04, 0x5b, 0x91, 0xa8, 0x84, 0x02, 0x7d, 0xd8, 0x5e,
	0x22, 0x43, 0x6e, 0xcc, 0x2a, 0x89, 0xdd, 0xf8, 0xd2, 0x41, 0xbf, 0xc0, 0xbe, 0xf6, 0x14, 0x27,
	0x20, 0xa8, 0x78, 0xe8, 0x9b, 0xff, 0x77, 0xbf, 0xb3, 0xcf, 0x7f, 0x9f, 0xa1, 0xcd, 0xd7, 0x6b,
	0x19, 0x6a, 0xf9, 0x9b, 0x9c, 0xf9, 0xca, 0xf9, 0x83, 0x9c, 0x02, 0xae, 0x9c, 0x6b, 0xe4, 0x74,
	0xc3, 0x95, 0xad, 0x22, 0x49, 0x92, 0x35, 0x76, 0x8c, 0x3d, 0x5f, 0xd9, 0x19, 0xd3, 0x7c, 0xb7,
	0x94, 0x72, 0xb9, 0x42, 0x87, 0x2b, 0xe1, 0xf0, 0x30, 0x94, 0xc4, 0x49, 0xc8, 0x50, 0xa7, 0x35,
	0xcd, 0x4f, 0x07, 0xfb, 0xaa, 0x48, 0x04, 0x82, 0xc4, 0x03, 0x3a, 0x93, 0xed, 0x2a, 0x03, 0xdb,
	0xff, 0x0a, 0x70, 0xde, 0x8f, 0xc5, 0xca, 0xbf, 0x4e, 0xf7, 0x75, 0xf1, 0x3e, 0x46, 0x4d, 0xec,
	0x02, 0xaa, 0x7c, 0xb1, 0x40, 0xad, 0x3d, 0x25, 0x45, 0x48, 0x56, 0xae, 0x95, 0xeb, 0x94, 0xdd,
	0x4a, 0x1a, 0x9b, 0x24, 0x21, 0xf6, 0x16, 0xca, 0x0b, 0x1e, 0x60, 0xc4, 0xbd, 0xd1, 0xc0, 0xca,
	0x9b, 0x7c, 0x29, 0x0d, 0x8c, 0x06, 0xec, 0x33, 0x9c, 0xfb, 0xe4, 0x29, 0xa9, 0xc5, 0xda, 0xd3,
	0xc4, 0x23, 0xf2, 0x48, 0x04, 0x68, 0x15, 0x0c, 0x56, 0xf7, 0x69, 0x92, 0x64, 0xa6, 0x49, 0x62,
	0x26, 0x02, 0x64, 0x97, 0x70, 0xb6, 0xc3, 0x31, 0xf4, 0x53, 0xf8, 0xa5, 0x81, 0x6b, 0x19, 0x3c,
	0x0c, 0x7d, 0x83, 0x36, 0xe0, 0xe4, 0x3e, 0xc6, 0x68, 0x63, 0x9d, 0x98, 0x74, 0x2a, 0xd8, 0x57,
	0x28, 0x07, 0x5c, 0xdf, 0x79, 0x5a, 0x3c, 0xa2, 0x55, 0x6c, 0xe5, 0x3a, 0x95, 0xee, 0x07, 0xfb,
	0xc0, 0xb8, 0x9d, 0x09, 0xf6, 0x54, 0x3c, 0xe2, 0x28, 0x24, 0xb7, 0x94, 0x54, 0x24, 0x82, 0xf5,
	0xa1, 0x12, 0xa1, 0x8e, 0x57, 0xe4, 0xd1, 0x46, 0xa1, 0x75, 0xda, 0xca, 0x75, 0x6a, 0xdd, 0x0b,
	0xfb, 0x98, 0xf1, 0xf6, 0xd0, 0x35, 0xe4, 0x6c, 0xa3, 0xd0, 0x85, 0x68, 0xb7, 0x66, 0xdf, 0x00,
	0x44, 0xc0, 0x97, 0x98, 0xb6, 0x50, 0x7a, 0x5e, 0x0b, 0x65, 0x53, 0x92, 0xa8, 0xf6, 0x12, 0x1a,
	0x87, 0x0f, 0xa1, 0x95, 0x0c, 0x35, 0xb2, 0x37, 0x50, 0x4c, 0x4f, 0x31, 0x6f, 0x50, 0x72, 0x33,
	0xc5, 0x2c, 0x38, 0xcd, 0x5a, 0xb2, 0xf2, 0xad, 0x42, 0xe7, 0x95, 0xbb, 0x95, 0xec, 0xfd, 0xb6,
	0x13, 0x9f, 0x13, 0x37, 0x96, 0x57, 0xb3, 0x83, 0x06, 0x9c, 0xf8, 0xd5, 0x04, 0x2a, 0x7b, 0x77,
	0x60, 0x0d, 0xa8, 0xbb, 0xc3, 0xe9, 0xed, 0x78, 0xe6, 0xcd, 0x7e, 0x4e, 0x86, 0xde, 0xa0, 0x37,
	0xeb, 0xd5, 0x5f, 0xb0, 0xd7, 0x70, 0xb6, 0x1f, 0x1d, 0xdd, 0xf4, 0x7e, 0x0c, 0xeb, 0xb9, 0xa7,
	0xf0, 0xf7, 0xdb, 0xf1, 0xb8, 0x9e, 0xef, 0xfe, 0x85, 0x5a, 0x36, 0xb2, 0x53, 0x8c, 0x1e, 0xc4,
	0x02, 0x19, 0x42, 0x75, 0xff, 0x32, 0xec, 0xf2, 0xb8, 0x97, 0x47, 0x26, 0xaf, 0x79, 0xf5, 0x1c,
	0x34, 0xf5, 0xa6, 0xff, 0xf1, 0x57, 0x7b, 0x2e, 0x68, 0x1e, 0x2f, 0xee, 0x90, 0x6c, 0x19, 0x2d,
	0x9d, 0xde, 0x91, 0xef, 0x34, 0x2f, 0x9a, 0x51, 0xff, 0xf2, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xe7,
	0x83, 0x63, 0x4b, 0x6d, 0x03, 0x00, 0x00,
}
