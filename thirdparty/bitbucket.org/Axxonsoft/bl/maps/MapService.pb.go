// Code generated by protoc-gen-go. DO NOT EDIT.
// source: axxonsoft/bl/maps/MapService.proto

package maps // import "bitbucket.org/Axxonsoft/bl/maps"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import primitive "bitbucket.org/Axxonsoft/bl/primitive"
import security "bitbucket.org/Axxonsoft/bl/security"
import _ "google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EMapType int32

const (
	EMapType_MAP_TYPE_RASTER EMapType = 0
	EMapType_MAP_TYPE_GEO    EMapType = 1
)

var EMapType_name = map[int32]string{
	0: "MAP_TYPE_RASTER",
	1: "MAP_TYPE_GEO",
}
var EMapType_value = map[string]int32{
	"MAP_TYPE_RASTER": 0,
	"MAP_TYPE_GEO":    1,
}

func (x EMapType) String() string {
	return proto.EnumName(EMapType_name, int32(x))
}
func (EMapType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{0}
}

type EViewMode int32

const (
	// Include only map meta info
	EViewMode_VIEW_MODE_ONLY_META EViewMode = 0
	// Full map information
	EViewMode_VIEW_MODE_FULL EViewMode = 1
)

var EViewMode_name = map[int32]string{
	0: "VIEW_MODE_ONLY_META",
	1: "VIEW_MODE_FULL",
}
var EViewMode_value = map[string]int32{
	"VIEW_MODE_ONLY_META": 0,
	"VIEW_MODE_FULL":      1,
}

func (x EViewMode) String() string {
	return proto.EnumName(EViewMode_name, int32(x))
}
func (EViewMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{1}
}

type ComponentMarker_EPinEdge int32

const (
	ComponentMarker_PIN_EDGE_NONE   ComponentMarker_EPinEdge = 0
	ComponentMarker_PIN_EDGE_LEFT   ComponentMarker_EPinEdge = 1
	ComponentMarker_PIN_EDGE_TOP    ComponentMarker_EPinEdge = 2
	ComponentMarker_PIN_EDGE_RIGHT  ComponentMarker_EPinEdge = 3
	ComponentMarker_PIN_EDGE_BOTTOM ComponentMarker_EPinEdge = 4
)

var ComponentMarker_EPinEdge_name = map[int32]string{
	0: "PIN_EDGE_NONE",
	1: "PIN_EDGE_LEFT",
	2: "PIN_EDGE_TOP",
	3: "PIN_EDGE_RIGHT",
	4: "PIN_EDGE_BOTTOM",
}
var ComponentMarker_EPinEdge_value = map[string]int32{
	"PIN_EDGE_NONE":   0,
	"PIN_EDGE_LEFT":   1,
	"PIN_EDGE_TOP":    2,
	"PIN_EDGE_RIGHT":  3,
	"PIN_EDGE_BOTTOM": 4,
}

func (x ComponentMarker_EPinEdge) String() string {
	return proto.EnumName(ComponentMarker_EPinEdge_name, int32(x))
}
func (ComponentMarker_EPinEdge) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{8, 0}
}

type Sharing_ESharingKind int32

const (
	Sharing_SHARING_KIND_ANY            Sharing_ESharingKind = 0
	Sharing_SHARING_KIND_SPECIFIC_ROLES Sharing_ESharingKind = 1
	Sharing_SHARING_KIND_NOT_SHARED     Sharing_ESharingKind = 2
)

var Sharing_ESharingKind_name = map[int32]string{
	0: "SHARING_KIND_ANY",
	1: "SHARING_KIND_SPECIFIC_ROLES",
	2: "SHARING_KIND_NOT_SHARED",
}
var Sharing_ESharingKind_value = map[string]int32{
	"SHARING_KIND_ANY":            0,
	"SHARING_KIND_SPECIFIC_ROLES": 1,
	"SHARING_KIND_NOT_SHARED":     2,
}

func (x Sharing_ESharingKind) String() string {
	return proto.EnumName(Sharing_ESharingKind_name, int32(x))
}
func (Sharing_ESharingKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{14, 0}
}

type FieldOfView struct {
	Angle                float64          `protobuf:"fixed64,1,opt,name=angle" json:"angle,omitempty"`
	Direction            *primitive.Point `protobuf:"bytes,2,opt,name=direction" json:"direction,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *FieldOfView) Reset()         { *m = FieldOfView{} }
func (m *FieldOfView) String() string { return proto.CompactTextString(m) }
func (*FieldOfView) ProtoMessage()    {}
func (*FieldOfView) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{0}
}
func (m *FieldOfView) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FieldOfView.Unmarshal(m, b)
}
func (m *FieldOfView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FieldOfView.Marshal(b, m, deterministic)
}
func (dst *FieldOfView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldOfView.Merge(dst, src)
}
func (m *FieldOfView) XXX_Size() int {
	return xxx_messageInfo_FieldOfView.Size(m)
}
func (m *FieldOfView) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldOfView.DiscardUnknown(m)
}

var xxx_messageInfo_FieldOfView proto.InternalMessageInfo

func (m *FieldOfView) GetAngle() float64 {
	if m != nil {
		return m.Angle
	}
	return 0
}

func (m *FieldOfView) GetDirection() *primitive.Point {
	if m != nil {
		return m.Direction
	}
	return nil
}

// Describes link between points.
type ImmersionModePointsLink struct {
	// Point on the video frame in normalized [0, 1] coordinates relative
	// to upper-left corner.
	VideoPoint *primitive.Point `protobuf:"bytes,1,opt,name=video_point,json=videoPoint" json:"video_point,omitempty"`
	// Point on the video monitor view in normalized [0, 1] coordinates relative
	// to upper-left corner.
	VideoMonitorViewPoint *primitive.Point `protobuf:"bytes,2,opt,name=video_monitor_view_point,json=videoMonitorViewPoint" json:"video_monitor_view_point,omitempty"`
	// Point on the map plane in normalized [-1, 1] coordinates.
	MapPoint             *primitive.Point `protobuf:"bytes,3,opt,name=map_point,json=mapPoint" json:"map_point,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ImmersionModePointsLink) Reset()         { *m = ImmersionModePointsLink{} }
func (m *ImmersionModePointsLink) String() string { return proto.CompactTextString(m) }
func (*ImmersionModePointsLink) ProtoMessage()    {}
func (*ImmersionModePointsLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{1}
}
func (m *ImmersionModePointsLink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImmersionModePointsLink.Unmarshal(m, b)
}
func (m *ImmersionModePointsLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImmersionModePointsLink.Marshal(b, m, deterministic)
}
func (dst *ImmersionModePointsLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImmersionModePointsLink.Merge(dst, src)
}
func (m *ImmersionModePointsLink) XXX_Size() int {
	return xxx_messageInfo_ImmersionModePointsLink.Size(m)
}
func (m *ImmersionModePointsLink) XXX_DiscardUnknown() {
	xxx_messageInfo_ImmersionModePointsLink.DiscardUnknown(m)
}

var xxx_messageInfo_ImmersionModePointsLink proto.InternalMessageInfo

func (m *ImmersionModePointsLink) GetVideoPoint() *primitive.Point {
	if m != nil {
		return m.VideoPoint
	}
	return nil
}

func (m *ImmersionModePointsLink) GetVideoMonitorViewPoint() *primitive.Point {
	if m != nil {
		return m.VideoMonitorViewPoint
	}
	return nil
}

func (m *ImmersionModePointsLink) GetMapPoint() *primitive.Point {
	if m != nil {
		return m.MapPoint
	}
	return nil
}

type ImmersionData struct {
	// Map position
	Position *primitive.Point `protobuf:"bytes,1,opt,name=position" json:"position,omitempty"`
	// Map zoom
	HasZoom bool  `protobuf:"varint,2,opt,name=has_zoom,json=hasZoom" json:"has_zoom,omitempty"`
	Zoom    int32 `protobuf:"varint,3,opt,name=zoom" json:"zoom,omitempty"`
	// Link points
	Links                []*ImmersionModePointsLink `protobuf:"bytes,10,rep,name=links" json:"links,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ImmersionData) Reset()         { *m = ImmersionData{} }
func (m *ImmersionData) String() string { return proto.CompactTextString(m) }
func (*ImmersionData) ProtoMessage()    {}
func (*ImmersionData) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{2}
}
func (m *ImmersionData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImmersionData.Unmarshal(m, b)
}
func (m *ImmersionData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImmersionData.Marshal(b, m, deterministic)
}
func (dst *ImmersionData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImmersionData.Merge(dst, src)
}
func (m *ImmersionData) XXX_Size() int {
	return xxx_messageInfo_ImmersionData.Size(m)
}
func (m *ImmersionData) XXX_DiscardUnknown() {
	xxx_messageInfo_ImmersionData.DiscardUnknown(m)
}

var xxx_messageInfo_ImmersionData proto.InternalMessageInfo

func (m *ImmersionData) GetPosition() *primitive.Point {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *ImmersionData) GetHasZoom() bool {
	if m != nil {
		return m.HasZoom
	}
	return false
}

func (m *ImmersionData) GetZoom() int32 {
	if m != nil {
		return m.Zoom
	}
	return 0
}

func (m *ImmersionData) GetLinks() []*ImmersionModePointsLink {
	if m != nil {
		return m.Links
	}
	return nil
}

type VideoFrameArrangement struct {
	// Incline in radians.
	Incline float64 `protobuf:"fixed64,1,opt,name=incline" json:"incline,omitempty"`
	// Relative distance of video frame from camera marker.
	Distance float64 `protobuf:"fixed64,2,opt,name=distance" json:"distance,omitempty"`
	// Angle in radians between bisector of camera sector
	// and line from video camera marker to extreme (left or right - no matter)
	// boundary of video frame.
	Angle                float64  `protobuf:"fixed64,3,opt,name=angle" json:"angle,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VideoFrameArrangement) Reset()         { *m = VideoFrameArrangement{} }
func (m *VideoFrameArrangement) String() string { return proto.CompactTextString(m) }
func (*VideoFrameArrangement) ProtoMessage()    {}
func (*VideoFrameArrangement) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{3}
}
func (m *VideoFrameArrangement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VideoFrameArrangement.Unmarshal(m, b)
}
func (m *VideoFrameArrangement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VideoFrameArrangement.Marshal(b, m, deterministic)
}
func (dst *VideoFrameArrangement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoFrameArrangement.Merge(dst, src)
}
func (m *VideoFrameArrangement) XXX_Size() int {
	return xxx_messageInfo_VideoFrameArrangement.Size(m)
}
func (m *VideoFrameArrangement) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoFrameArrangement.DiscardUnknown(m)
}

var xxx_messageInfo_VideoFrameArrangement proto.InternalMessageInfo

func (m *VideoFrameArrangement) GetIncline() float64 {
	if m != nil {
		return m.Incline
	}
	return 0
}

func (m *VideoFrameArrangement) GetDistance() float64 {
	if m != nil {
		return m.Distance
	}
	return 0
}

func (m *VideoFrameArrangement) GetAngle() float64 {
	if m != nil {
		return m.Angle
	}
	return 0
}

type CameraMarker struct {
	FieldOfView           *FieldOfView           `protobuf:"bytes,1,opt,name=field_of_view,json=fieldOfView" json:"field_of_view,omitempty"`
	Immersion             *ImmersionData         `protobuf:"bytes,2,opt,name=immersion" json:"immersion,omitempty"`
	VideoFrameArrangement *VideoFrameArrangement `protobuf:"bytes,3,opt,name=video_frame_arrangement,json=videoFrameArrangement" json:"video_frame_arrangement,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}               `json:"-"`
	XXX_unrecognized      []byte                 `json:"-"`
	XXX_sizecache         int32                  `json:"-"`
}

func (m *CameraMarker) Reset()         { *m = CameraMarker{} }
func (m *CameraMarker) String() string { return proto.CompactTextString(m) }
func (*CameraMarker) ProtoMessage()    {}
func (*CameraMarker) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{4}
}
func (m *CameraMarker) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CameraMarker.Unmarshal(m, b)
}
func (m *CameraMarker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CameraMarker.Marshal(b, m, deterministic)
}
func (dst *CameraMarker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CameraMarker.Merge(dst, src)
}
func (m *CameraMarker) XXX_Size() int {
	return xxx_messageInfo_CameraMarker.Size(m)
}
func (m *CameraMarker) XXX_DiscardUnknown() {
	xxx_messageInfo_CameraMarker.DiscardUnknown(m)
}

var xxx_messageInfo_CameraMarker proto.InternalMessageInfo

func (m *CameraMarker) GetFieldOfView() *FieldOfView {
	if m != nil {
		return m.FieldOfView
	}
	return nil
}

func (m *CameraMarker) GetImmersion() *ImmersionData {
	if m != nil {
		return m.Immersion
	}
	return nil
}

func (m *CameraMarker) GetVideoFrameArrangement() *VideoFrameArrangement {
	if m != nil {
		return m.VideoFrameArrangement
	}
	return nil
}

type RelayMarker struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RelayMarker) Reset()         { *m = RelayMarker{} }
func (m *RelayMarker) String() string { return proto.CompactTextString(m) }
func (*RelayMarker) ProtoMessage()    {}
func (*RelayMarker) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{5}
}
func (m *RelayMarker) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RelayMarker.Unmarshal(m, b)
}
func (m *RelayMarker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RelayMarker.Marshal(b, m, deterministic)
}
func (dst *RelayMarker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelayMarker.Merge(dst, src)
}
func (m *RelayMarker) XXX_Size() int {
	return xxx_messageInfo_RelayMarker.Size(m)
}
func (m *RelayMarker) XXX_DiscardUnknown() {
	xxx_messageInfo_RelayMarker.DiscardUnknown(m)
}

var xxx_messageInfo_RelayMarker proto.InternalMessageInfo

type SensorMarker struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SensorMarker) Reset()         { *m = SensorMarker{} }
func (m *SensorMarker) String() string { return proto.CompactTextString(m) }
func (*SensorMarker) ProtoMessage()    {}
func (*SensorMarker) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{6}
}
func (m *SensorMarker) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SensorMarker.Unmarshal(m, b)
}
func (m *SensorMarker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SensorMarker.Marshal(b, m, deterministic)
}
func (dst *SensorMarker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SensorMarker.Merge(dst, src)
}
func (m *SensorMarker) XXX_Size() int {
	return xxx_messageInfo_SensorMarker.Size(m)
}
func (m *SensorMarker) XXX_DiscardUnknown() {
	xxx_messageInfo_SensorMarker.DiscardUnknown(m)
}

var xxx_messageInfo_SensorMarker proto.InternalMessageInfo

type DeviceNodeMarker struct {
	// ID of visualization form as icons.
	IconsKey string `protobuf:"bytes,1,opt,name=icons_key,json=iconsKey" json:"icons_key,omitempty"`
	// ID of visualization form as polyline.
	LinesKey string `protobuf:"bytes,2,opt,name=lines_key,json=linesKey" json:"lines_key,omitempty"`
	// Flag which set marker in opening form.
	AutoOpen bool `protobuf:"varint,3,opt,name=auto_open,json=autoOpen" json:"auto_open,omitempty"`
	// Point of line.
	LinePoint            *primitive.Point `protobuf:"bytes,4,opt,name=line_point,json=linePoint" json:"line_point,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DeviceNodeMarker) Reset()         { *m = DeviceNodeMarker{} }
func (m *DeviceNodeMarker) String() string { return proto.CompactTextString(m) }
func (*DeviceNodeMarker) ProtoMessage()    {}
func (*DeviceNodeMarker) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{7}
}
func (m *DeviceNodeMarker) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceNodeMarker.Unmarshal(m, b)
}
func (m *DeviceNodeMarker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceNodeMarker.Marshal(b, m, deterministic)
}
func (dst *DeviceNodeMarker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceNodeMarker.Merge(dst, src)
}
func (m *DeviceNodeMarker) XXX_Size() int {
	return xxx_messageInfo_DeviceNodeMarker.Size(m)
}
func (m *DeviceNodeMarker) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceNodeMarker.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceNodeMarker proto.InternalMessageInfo

func (m *DeviceNodeMarker) GetIconsKey() string {
	if m != nil {
		return m.IconsKey
	}
	return ""
}

func (m *DeviceNodeMarker) GetLinesKey() string {
	if m != nil {
		return m.LinesKey
	}
	return ""
}

func (m *DeviceNodeMarker) GetAutoOpen() bool {
	if m != nil {
		return m.AutoOpen
	}
	return false
}

func (m *DeviceNodeMarker) GetLinePoint() *primitive.Point {
	if m != nil {
		return m.LinePoint
	}
	return nil
}

type ComponentMarker struct {
	// Parent component name.
	ParentComponentName string `protobuf:"bytes,1,opt,name=parent_component_name,json=parentComponentName" json:"parent_component_name,omitempty"`
	// Component name to which pinned.
	PinnedTo string `protobuf:"bytes,2,opt,name=pinned_to,json=pinnedTo" json:"pinned_to,omitempty"`
	// Edge of object to which pinned.
	PinnedToEdge ComponentMarker_EPinEdge `protobuf:"varint,3,opt,name=pinned_to_edge,json=pinnedToEdge,enum=axxonsoft.bl.maps.ComponentMarker_EPinEdge" json:"pinned_to_edge,omitempty"`
	// Index of entity in pinned to camera entities column.
	PinToCameraIndex int32 `protobuf:"varint,4,opt,name=pin_to_camera_index,json=pinToCameraIndex" json:"pin_to_camera_index,omitempty"`
	// Distance from video camera.
	Distance int32 `protobuf:"varint,5,opt,name=distance" json:"distance,omitempty"`
	// Marker details corresponding to the type of the component marker.
	//
	// Types that are valid to be assigned to Type:
	//	*ComponentMarker_RelayMarker
	//	*ComponentMarker_SensorMarker
	//	*ComponentMarker_DeviceNodeMarker
	Type                 isComponentMarker_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ComponentMarker) Reset()         { *m = ComponentMarker{} }
func (m *ComponentMarker) String() string { return proto.CompactTextString(m) }
func (*ComponentMarker) ProtoMessage()    {}
func (*ComponentMarker) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{8}
}
func (m *ComponentMarker) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ComponentMarker.Unmarshal(m, b)
}
func (m *ComponentMarker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ComponentMarker.Marshal(b, m, deterministic)
}
func (dst *ComponentMarker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComponentMarker.Merge(dst, src)
}
func (m *ComponentMarker) XXX_Size() int {
	return xxx_messageInfo_ComponentMarker.Size(m)
}
func (m *ComponentMarker) XXX_DiscardUnknown() {
	xxx_messageInfo_ComponentMarker.DiscardUnknown(m)
}

var xxx_messageInfo_ComponentMarker proto.InternalMessageInfo

type isComponentMarker_Type interface {
	isComponentMarker_Type()
}

type ComponentMarker_RelayMarker struct {
	RelayMarker *RelayMarker `protobuf:"bytes,10,opt,name=relay_marker,json=relayMarker,oneof"`
}
type ComponentMarker_SensorMarker struct {
	SensorMarker *SensorMarker `protobuf:"bytes,11,opt,name=sensor_marker,json=sensorMarker,oneof"`
}
type ComponentMarker_DeviceNodeMarker struct {
	DeviceNodeMarker *DeviceNodeMarker `protobuf:"bytes,12,opt,name=device_node_marker,json=deviceNodeMarker,oneof"`
}

func (*ComponentMarker_RelayMarker) isComponentMarker_Type()      {}
func (*ComponentMarker_SensorMarker) isComponentMarker_Type()     {}
func (*ComponentMarker_DeviceNodeMarker) isComponentMarker_Type() {}

func (m *ComponentMarker) GetType() isComponentMarker_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *ComponentMarker) GetParentComponentName() string {
	if m != nil {
		return m.ParentComponentName
	}
	return ""
}

func (m *ComponentMarker) GetPinnedTo() string {
	if m != nil {
		return m.PinnedTo
	}
	return ""
}

func (m *ComponentMarker) GetPinnedToEdge() ComponentMarker_EPinEdge {
	if m != nil {
		return m.PinnedToEdge
	}
	return ComponentMarker_PIN_EDGE_NONE
}

func (m *ComponentMarker) GetPinToCameraIndex() int32 {
	if m != nil {
		return m.PinToCameraIndex
	}
	return 0
}

func (m *ComponentMarker) GetDistance() int32 {
	if m != nil {
		return m.Distance
	}
	return 0
}

func (m *ComponentMarker) GetRelayMarker() *RelayMarker {
	if x, ok := m.GetType().(*ComponentMarker_RelayMarker); ok {
		return x.RelayMarker
	}
	return nil
}

func (m *ComponentMarker) GetSensorMarker() *SensorMarker {
	if x, ok := m.GetType().(*ComponentMarker_SensorMarker); ok {
		return x.SensorMarker
	}
	return nil
}

func (m *ComponentMarker) GetDeviceNodeMarker() *DeviceNodeMarker {
	if x, ok := m.GetType().(*ComponentMarker_DeviceNodeMarker); ok {
		return x.DeviceNodeMarker
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ComponentMarker) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ComponentMarker_OneofMarshaler, _ComponentMarker_OneofUnmarshaler, _ComponentMarker_OneofSizer, []interface{}{
		(*ComponentMarker_RelayMarker)(nil),
		(*ComponentMarker_SensorMarker)(nil),
		(*ComponentMarker_DeviceNodeMarker)(nil),
	}
}

func _ComponentMarker_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ComponentMarker)
	// type
	switch x := m.Type.(type) {
	case *ComponentMarker_RelayMarker:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RelayMarker); err != nil {
			return err
		}
	case *ComponentMarker_SensorMarker:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SensorMarker); err != nil {
			return err
		}
	case *ComponentMarker_DeviceNodeMarker:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeviceNodeMarker); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ComponentMarker.Type has unexpected type %T", x)
	}
	return nil
}

func _ComponentMarker_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ComponentMarker)
	switch tag {
	case 10: // type.relay_marker
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RelayMarker)
		err := b.DecodeMessage(msg)
		m.Type = &ComponentMarker_RelayMarker{msg}
		return true, err
	case 11: // type.sensor_marker
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SensorMarker)
		err := b.DecodeMessage(msg)
		m.Type = &ComponentMarker_SensorMarker{msg}
		return true, err
	case 12: // type.device_node_marker
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeviceNodeMarker)
		err := b.DecodeMessage(msg)
		m.Type = &ComponentMarker_DeviceNodeMarker{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ComponentMarker_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ComponentMarker)
	// type
	switch x := m.Type.(type) {
	case *ComponentMarker_RelayMarker:
		s := proto.Size(x.RelayMarker)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ComponentMarker_SensorMarker:
		s := proto.Size(x.SensorMarker)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ComponentMarker_DeviceNodeMarker:
		s := proto.Size(x.DeviceNodeMarker)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TransitionMarker struct {
	// Map ID for transition.
	LinkedMapId          string   `protobuf:"bytes,1,opt,name=linked_map_id,json=linkedMapId" json:"linked_map_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransitionMarker) Reset()         { *m = TransitionMarker{} }
func (m *TransitionMarker) String() string { return proto.CompactTextString(m) }
func (*TransitionMarker) ProtoMessage()    {}
func (*TransitionMarker) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{9}
}
func (m *TransitionMarker) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransitionMarker.Unmarshal(m, b)
}
func (m *TransitionMarker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransitionMarker.Marshal(b, m, deterministic)
}
func (dst *TransitionMarker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransitionMarker.Merge(dst, src)
}
func (m *TransitionMarker) XXX_Size() int {
	return xxx_messageInfo_TransitionMarker.Size(m)
}
func (m *TransitionMarker) XXX_DiscardUnknown() {
	xxx_messageInfo_TransitionMarker.DiscardUnknown(m)
}

var xxx_messageInfo_TransitionMarker proto.InternalMessageInfo

func (m *TransitionMarker) GetLinkedMapId() string {
	if m != nil {
		return m.LinkedMapId
	}
	return ""
}

type ImmersionModeMarker struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImmersionModeMarker) Reset()         { *m = ImmersionModeMarker{} }
func (m *ImmersionModeMarker) String() string { return proto.CompactTextString(m) }
func (*ImmersionModeMarker) ProtoMessage()    {}
func (*ImmersionModeMarker) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{10}
}
func (m *ImmersionModeMarker) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImmersionModeMarker.Unmarshal(m, b)
}
func (m *ImmersionModeMarker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImmersionModeMarker.Marshal(b, m, deterministic)
}
func (dst *ImmersionModeMarker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImmersionModeMarker.Merge(dst, src)
}
func (m *ImmersionModeMarker) XXX_Size() int {
	return xxx_messageInfo_ImmersionModeMarker.Size(m)
}
func (m *ImmersionModeMarker) XXX_DiscardUnknown() {
	xxx_messageInfo_ImmersionModeMarker.DiscardUnknown(m)
}

var xxx_messageInfo_ImmersionModeMarker proto.InternalMessageInfo

// Represents a marker displayed on the map.
type Marker struct {
	// Relative position of the marker on the map.
	Position *primitive.Point `protobuf:"bytes,1,opt,name=position" json:"position,omitempty"`
	// Name of a component (camera, sensor, etc.) that associated with this marker.
	ComponentName string `protobuf:"bytes,2,opt,name=component_name,json=componentName" json:"component_name,omitempty"`
	// Flag indicating whether to display marker's title or not.
	DisplayTitle bool `protobuf:"varint,3,opt,name=display_title,json=displayTitle" json:"display_title,omitempty"`
	// Marker details corresponding to the type of the marker
	//
	// Types that are valid to be assigned to Type:
	//	*Marker_CameraMarker
	//	*Marker_ComponentMarker
	//	*Marker_TransitionMarker
	//	*Marker_ImmersionModeMarker
	Type                 isMarker_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Marker) Reset()         { *m = Marker{} }
func (m *Marker) String() string { return proto.CompactTextString(m) }
func (*Marker) ProtoMessage()    {}
func (*Marker) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{11}
}
func (m *Marker) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Marker.Unmarshal(m, b)
}
func (m *Marker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Marker.Marshal(b, m, deterministic)
}
func (dst *Marker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Marker.Merge(dst, src)
}
func (m *Marker) XXX_Size() int {
	return xxx_messageInfo_Marker.Size(m)
}
func (m *Marker) XXX_DiscardUnknown() {
	xxx_messageInfo_Marker.DiscardUnknown(m)
}

var xxx_messageInfo_Marker proto.InternalMessageInfo

type isMarker_Type interface {
	isMarker_Type()
}

type Marker_CameraMarker struct {
	CameraMarker *CameraMarker `protobuf:"bytes,10,opt,name=camera_marker,json=cameraMarker,oneof"`
}
type Marker_ComponentMarker struct {
	ComponentMarker *ComponentMarker `protobuf:"bytes,11,opt,name=component_marker,json=componentMarker,oneof"`
}
type Marker_TransitionMarker struct {
	TransitionMarker *TransitionMarker `protobuf:"bytes,12,opt,name=transition_marker,json=transitionMarker,oneof"`
}
type Marker_ImmersionModeMarker struct {
	ImmersionModeMarker *ImmersionModeMarker `protobuf:"bytes,13,opt,name=immersion_mode_marker,json=immersionModeMarker,oneof"`
}

func (*Marker_CameraMarker) isMarker_Type()        {}
func (*Marker_ComponentMarker) isMarker_Type()     {}
func (*Marker_TransitionMarker) isMarker_Type()    {}
func (*Marker_ImmersionModeMarker) isMarker_Type() {}

func (m *Marker) GetType() isMarker_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Marker) GetPosition() *primitive.Point {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *Marker) GetComponentName() string {
	if m != nil {
		return m.ComponentName
	}
	return ""
}

func (m *Marker) GetDisplayTitle() bool {
	if m != nil {
		return m.DisplayTitle
	}
	return false
}

func (m *Marker) GetCameraMarker() *CameraMarker {
	if x, ok := m.GetType().(*Marker_CameraMarker); ok {
		return x.CameraMarker
	}
	return nil
}

func (m *Marker) GetComponentMarker() *ComponentMarker {
	if x, ok := m.GetType().(*Marker_ComponentMarker); ok {
		return x.ComponentMarker
	}
	return nil
}

func (m *Marker) GetTransitionMarker() *TransitionMarker {
	if x, ok := m.GetType().(*Marker_TransitionMarker); ok {
		return x.TransitionMarker
	}
	return nil
}

func (m *Marker) GetImmersionModeMarker() *ImmersionModeMarker {
	if x, ok := m.GetType().(*Marker_ImmersionModeMarker); ok {
		return x.ImmersionModeMarker
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Marker) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Marker_OneofMarshaler, _Marker_OneofUnmarshaler, _Marker_OneofSizer, []interface{}{
		(*Marker_CameraMarker)(nil),
		(*Marker_ComponentMarker)(nil),
		(*Marker_TransitionMarker)(nil),
		(*Marker_ImmersionModeMarker)(nil),
	}
}

func _Marker_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Marker)
	// type
	switch x := m.Type.(type) {
	case *Marker_CameraMarker:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CameraMarker); err != nil {
			return err
		}
	case *Marker_ComponentMarker:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ComponentMarker); err != nil {
			return err
		}
	case *Marker_TransitionMarker:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TransitionMarker); err != nil {
			return err
		}
	case *Marker_ImmersionModeMarker:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ImmersionModeMarker); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Marker.Type has unexpected type %T", x)
	}
	return nil
}

func _Marker_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Marker)
	switch tag {
	case 10: // type.camera_marker
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CameraMarker)
		err := b.DecodeMessage(msg)
		m.Type = &Marker_CameraMarker{msg}
		return true, err
	case 11: // type.component_marker
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ComponentMarker)
		err := b.DecodeMessage(msg)
		m.Type = &Marker_ComponentMarker{msg}
		return true, err
	case 12: // type.transition_marker
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TransitionMarker)
		err := b.DecodeMessage(msg)
		m.Type = &Marker_TransitionMarker{msg}
		return true, err
	case 13: // type.immersion_mode_marker
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ImmersionModeMarker)
		err := b.DecodeMessage(msg)
		m.Type = &Marker_ImmersionModeMarker{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Marker_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Marker)
	// type
	switch x := m.Type.(type) {
	case *Marker_CameraMarker:
		s := proto.Size(x.CameraMarker)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Marker_ComponentMarker:
		s := proto.Size(x.ComponentMarker)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Marker_TransitionMarker:
		s := proto.Size(x.TransitionMarker)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Marker_ImmersionModeMarker:
		s := proto.Size(x.ImmersionModeMarker)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type MapImageMeta struct {
	FileName string          `protobuf:"bytes,1,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
	MimeType string          `protobuf:"bytes,2,opt,name=mime_type,json=mimeType" json:"mime_type,omitempty"`
	Size     *primitive.Size `protobuf:"bytes,3,opt,name=size" json:"size,omitempty"`
	// Image resource name
	Name string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	// Image size in bytes
	SizeBytes            uint64   `protobuf:"varint,5,opt,name=size_bytes,json=sizeBytes" json:"size_bytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MapImageMeta) Reset()         { *m = MapImageMeta{} }
func (m *MapImageMeta) String() string { return proto.CompactTextString(m) }
func (*MapImageMeta) ProtoMessage()    {}
func (*MapImageMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{12}
}
func (m *MapImageMeta) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MapImageMeta.Unmarshal(m, b)
}
func (m *MapImageMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MapImageMeta.Marshal(b, m, deterministic)
}
func (dst *MapImageMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapImageMeta.Merge(dst, src)
}
func (m *MapImageMeta) XXX_Size() int {
	return xxx_messageInfo_MapImageMeta.Size(m)
}
func (m *MapImageMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_MapImageMeta.DiscardUnknown(m)
}

var xxx_messageInfo_MapImageMeta proto.InternalMessageInfo

func (m *MapImageMeta) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *MapImageMeta) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

func (m *MapImageMeta) GetSize() *primitive.Size {
	if m != nil {
		return m.Size
	}
	return nil
}

func (m *MapImageMeta) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MapImageMeta) GetSizeBytes() uint64 {
	if m != nil {
		return m.SizeBytes
	}
	return 0
}

type Map struct {
	// Name of the map
	Name                 string           `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type                 EMapType         `protobuf:"varint,2,opt,name=type,enum=axxonsoft.bl.maps.EMapType" json:"type,omitempty"`
	Position             *primitive.Point `protobuf:"bytes,3,opt,name=position" json:"position,omitempty"`
	Zoom                 int32            `protobuf:"varint,4,opt,name=zoom" json:"zoom,omitempty"`
	ProviderId           string           `protobuf:"bytes,5,opt,name=provider_id,json=providerId" json:"provider_id,omitempty"`
	ImageMeta            *MapImageMeta    `protobuf:"bytes,6,opt,name=image_meta,json=imageMeta" json:"image_meta,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Map) Reset()         { *m = Map{} }
func (m *Map) String() string { return proto.CompactTextString(m) }
func (*Map) ProtoMessage()    {}
func (*Map) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{13}
}
func (m *Map) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Map.Unmarshal(m, b)
}
func (m *Map) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Map.Marshal(b, m, deterministic)
}
func (dst *Map) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Map.Merge(dst, src)
}
func (m *Map) XXX_Size() int {
	return xxx_messageInfo_Map.Size(m)
}
func (m *Map) XXX_DiscardUnknown() {
	xxx_messageInfo_Map.DiscardUnknown(m)
}

var xxx_messageInfo_Map proto.InternalMessageInfo

func (m *Map) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Map) GetType() EMapType {
	if m != nil {
		return m.Type
	}
	return EMapType_MAP_TYPE_RASTER
}

func (m *Map) GetPosition() *primitive.Point {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *Map) GetZoom() int32 {
	if m != nil {
		return m.Zoom
	}
	return 0
}

func (m *Map) GetProviderId() string {
	if m != nil {
		return m.ProviderId
	}
	return ""
}

func (m *Map) GetImageMeta() *MapImageMeta {
	if m != nil {
		return m.ImageMeta
	}
	return nil
}

type Sharing struct {
	// User (subject) ID of the owner
	Owner                string               `protobuf:"bytes,1,opt,name=owner" json:"owner,omitempty"`
	Kind                 Sharing_ESharingKind `protobuf:"varint,2,opt,name=kind,enum=axxonsoft.bl.maps.Sharing_ESharingKind" json:"kind,omitempty"`
	SharedRoles          []string             `protobuf:"bytes,3,rep,name=shared_roles,json=sharedRoles" json:"shared_roles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Sharing) Reset()         { *m = Sharing{} }
func (m *Sharing) String() string { return proto.CompactTextString(m) }
func (*Sharing) ProtoMessage()    {}
func (*Sharing) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{14}
}
func (m *Sharing) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sharing.Unmarshal(m, b)
}
func (m *Sharing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sharing.Marshal(b, m, deterministic)
}
func (dst *Sharing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sharing.Merge(dst, src)
}
func (m *Sharing) XXX_Size() int {
	return xxx_messageInfo_Sharing.Size(m)
}
func (m *Sharing) XXX_DiscardUnknown() {
	xxx_messageInfo_Sharing.DiscardUnknown(m)
}

var xxx_messageInfo_Sharing proto.InternalMessageInfo

func (m *Sharing) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Sharing) GetKind() Sharing_ESharingKind {
	if m != nil {
		return m.Kind
	}
	return Sharing_SHARING_KIND_ANY
}

func (m *Sharing) GetSharedRoles() []string {
	if m != nil {
		return m.SharedRoles
	}
	return nil
}

type MapMeta struct {
	// Map unique ID
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Map access for current user (subject)
	Access security.EMapAccess `protobuf:"varint,2,opt,name=access,enum=axxonsoft.bl.security.EMapAccess" json:"access,omitempty"`
	// Map's sharing
	Sharing *Sharing `protobuf:"bytes,3,opt,name=sharing" json:"sharing,omitempty"`
	// Name of the map
	Name string   `protobuf:"bytes,10,opt,name=name" json:"name,omitempty"`
	Type EMapType `protobuf:"varint,11,opt,name=type,enum=axxonsoft.bl.maps.EMapType" json:"type,omitempty"`
	// Current map packet version (empty when map is being created)
	Etag                 string   `protobuf:"bytes,15,opt,name=etag" json:"etag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MapMeta) Reset()         { *m = MapMeta{} }
func (m *MapMeta) String() string { return proto.CompactTextString(m) }
func (*MapMeta) ProtoMessage()    {}
func (*MapMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{15}
}
func (m *MapMeta) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MapMeta.Unmarshal(m, b)
}
func (m *MapMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MapMeta.Marshal(b, m, deterministic)
}
func (dst *MapMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapMeta.Merge(dst, src)
}
func (m *MapMeta) XXX_Size() int {
	return xxx_messageInfo_MapMeta.Size(m)
}
func (m *MapMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_MapMeta.DiscardUnknown(m)
}

var xxx_messageInfo_MapMeta proto.InternalMessageInfo

func (m *MapMeta) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MapMeta) GetAccess() security.EMapAccess {
	if m != nil {
		return m.Access
	}
	return security.EMapAccess_MAP_ACCESS_UNSPECIFIED
}

func (m *MapMeta) GetSharing() *Sharing {
	if m != nil {
		return m.Sharing
	}
	return nil
}

func (m *MapMeta) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MapMeta) GetType() EMapType {
	if m != nil {
		return m.Type
	}
	return EMapType_MAP_TYPE_RASTER
}

func (m *MapMeta) GetEtag() string {
	if m != nil {
		return m.Etag
	}
	return ""
}

type MapFull struct {
	Meta                 *MapMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Data                 *Map     `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MapFull) Reset()         { *m = MapFull{} }
func (m *MapFull) String() string { return proto.CompactTextString(m) }
func (*MapFull) ProtoMessage()    {}
func (*MapFull) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{16}
}
func (m *MapFull) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MapFull.Unmarshal(m, b)
}
func (m *MapFull) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MapFull.Marshal(b, m, deterministic)
}
func (dst *MapFull) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapFull.Merge(dst, src)
}
func (m *MapFull) XXX_Size() int {
	return xxx_messageInfo_MapFull.Size(m)
}
func (m *MapFull) XXX_DiscardUnknown() {
	xxx_messageInfo_MapFull.DiscardUnknown(m)
}

var xxx_messageInfo_MapFull proto.InternalMessageInfo

func (m *MapFull) GetMeta() *MapMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *MapFull) GetData() *Map {
	if m != nil {
		return m.Data
	}
	return nil
}

type MapImage struct {
	Meta *MapImageMeta `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Data []byte        `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// Current image packet version
	Etag                 string   `protobuf:"bytes,15,opt,name=etag" json:"etag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MapImage) Reset()         { *m = MapImage{} }
func (m *MapImage) String() string { return proto.CompactTextString(m) }
func (*MapImage) ProtoMessage()    {}
func (*MapImage) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{17}
}
func (m *MapImage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MapImage.Unmarshal(m, b)
}
func (m *MapImage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MapImage.Marshal(b, m, deterministic)
}
func (dst *MapImage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapImage.Merge(dst, src)
}
func (m *MapImage) XXX_Size() int {
	return xxx_messageInfo_MapImage.Size(m)
}
func (m *MapImage) XXX_DiscardUnknown() {
	xxx_messageInfo_MapImage.DiscardUnknown(m)
}

var xxx_messageInfo_MapImage proto.InternalMessageInfo

func (m *MapImage) GetMeta() *MapImageMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *MapImage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *MapImage) GetEtag() string {
	if m != nil {
		return m.Etag
	}
	return ""
}

type ListMapsRequest struct {
	View                 EViewMode `protobuf:"varint,1,opt,name=view,enum=axxonsoft.bl.maps.EViewMode" json:"view,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListMapsRequest) Reset()         { *m = ListMapsRequest{} }
func (m *ListMapsRequest) String() string { return proto.CompactTextString(m) }
func (*ListMapsRequest) ProtoMessage()    {}
func (*ListMapsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{18}
}
func (m *ListMapsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListMapsRequest.Unmarshal(m, b)
}
func (m *ListMapsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListMapsRequest.Marshal(b, m, deterministic)
}
func (dst *ListMapsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMapsRequest.Merge(dst, src)
}
func (m *ListMapsRequest) XXX_Size() int {
	return xxx_messageInfo_ListMapsRequest.Size(m)
}
func (m *ListMapsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMapsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListMapsRequest proto.InternalMessageInfo

func (m *ListMapsRequest) GetView() EViewMode {
	if m != nil {
		return m.View
	}
	return EViewMode_VIEW_MODE_ONLY_META
}

type ListMapsResponse struct {
	Items                []*MapFull `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ListMapsResponse) Reset()         { *m = ListMapsResponse{} }
func (m *ListMapsResponse) String() string { return proto.CompactTextString(m) }
func (*ListMapsResponse) ProtoMessage()    {}
func (*ListMapsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{19}
}
func (m *ListMapsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListMapsResponse.Unmarshal(m, b)
}
func (m *ListMapsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListMapsResponse.Marshal(b, m, deterministic)
}
func (dst *ListMapsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMapsResponse.Merge(dst, src)
}
func (m *ListMapsResponse) XXX_Size() int {
	return xxx_messageInfo_ListMapsResponse.Size(m)
}
func (m *ListMapsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMapsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListMapsResponse proto.InternalMessageInfo

func (m *ListMapsResponse) GetItems() []*MapFull {
	if m != nil {
		return m.Items
	}
	return nil
}

type BatchGetMapsRequest struct {
	MapIds               []string `protobuf:"bytes,1,rep,name=map_ids,json=mapIds" json:"map_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchGetMapsRequest) Reset()         { *m = BatchGetMapsRequest{} }
func (m *BatchGetMapsRequest) String() string { return proto.CompactTextString(m) }
func (*BatchGetMapsRequest) ProtoMessage()    {}
func (*BatchGetMapsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{20}
}
func (m *BatchGetMapsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchGetMapsRequest.Unmarshal(m, b)
}
func (m *BatchGetMapsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchGetMapsRequest.Marshal(b, m, deterministic)
}
func (dst *BatchGetMapsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchGetMapsRequest.Merge(dst, src)
}
func (m *BatchGetMapsRequest) XXX_Size() int {
	return xxx_messageInfo_BatchGetMapsRequest.Size(m)
}
func (m *BatchGetMapsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchGetMapsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchGetMapsRequest proto.InternalMessageInfo

func (m *BatchGetMapsRequest) GetMapIds() []string {
	if m != nil {
		return m.MapIds
	}
	return nil
}

type BatchGetMapsResponse struct {
	Items                []*MapFull `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	FailedMapIds         []string   `protobuf:"bytes,2,rep,name=failed_map_ids,json=failedMapIds" json:"failed_map_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *BatchGetMapsResponse) Reset()         { *m = BatchGetMapsResponse{} }
func (m *BatchGetMapsResponse) String() string { return proto.CompactTextString(m) }
func (*BatchGetMapsResponse) ProtoMessage()    {}
func (*BatchGetMapsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{21}
}
func (m *BatchGetMapsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchGetMapsResponse.Unmarshal(m, b)
}
func (m *BatchGetMapsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchGetMapsResponse.Marshal(b, m, deterministic)
}
func (dst *BatchGetMapsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchGetMapsResponse.Merge(dst, src)
}
func (m *BatchGetMapsResponse) XXX_Size() int {
	return xxx_messageInfo_BatchGetMapsResponse.Size(m)
}
func (m *BatchGetMapsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchGetMapsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BatchGetMapsResponse proto.InternalMessageInfo

func (m *BatchGetMapsResponse) GetItems() []*MapFull {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *BatchGetMapsResponse) GetFailedMapIds() []string {
	if m != nil {
		return m.FailedMapIds
	}
	return nil
}

type CreateMap struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// NOTE: If omitted, applying default sharing (the map will not be shared).
	// You may pass nonempty owner's ID to delegate ownership of the map for
	// specific user. Otherwise, current user will be an owner.
	Sharing              *Sharing  `protobuf:"bytes,2,opt,name=sharing" json:"sharing,omitempty"`
	Map                  *Map      `protobuf:"bytes,3,opt,name=map" json:"map,omitempty"`
	ImageData            []byte    `protobuf:"bytes,4,opt,name=image_data,json=imageData,proto3" json:"image_data,omitempty"`
	Markers              []*Marker `protobuf:"bytes,5,rep,name=markers" json:"markers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CreateMap) Reset()         { *m = CreateMap{} }
func (m *CreateMap) String() string { return proto.CompactTextString(m) }
func (*CreateMap) ProtoMessage()    {}
func (*CreateMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{22}
}
func (m *CreateMap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateMap.Unmarshal(m, b)
}
func (m *CreateMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateMap.Marshal(b, m, deterministic)
}
func (dst *CreateMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMap.Merge(dst, src)
}
func (m *CreateMap) XXX_Size() int {
	return xxx_messageInfo_CreateMap.Size(m)
}
func (m *CreateMap) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMap.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMap proto.InternalMessageInfo

func (m *CreateMap) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CreateMap) GetSharing() *Sharing {
	if m != nil {
		return m.Sharing
	}
	return nil
}

func (m *CreateMap) GetMap() *Map {
	if m != nil {
		return m.Map
	}
	return nil
}

func (m *CreateMap) GetImageData() []byte {
	if m != nil {
		return m.ImageData
	}
	return nil
}

func (m *CreateMap) GetMarkers() []*Marker {
	if m != nil {
		return m.Markers
	}
	return nil
}

type UpdateMap struct {
	Etag                 string   `protobuf:"bytes,1,opt,name=etag" json:"etag,omitempty"`
	MapId                string   `protobuf:"bytes,2,opt,name=map_id,json=mapId" json:"map_id,omitempty"`
	Map                  *Map     `protobuf:"bytes,3,opt,name=map" json:"map,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateMap) Reset()         { *m = UpdateMap{} }
func (m *UpdateMap) String() string { return proto.CompactTextString(m) }
func (*UpdateMap) ProtoMessage()    {}
func (*UpdateMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{23}
}
func (m *UpdateMap) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateMap.Unmarshal(m, b)
}
func (m *UpdateMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateMap.Marshal(b, m, deterministic)
}
func (dst *UpdateMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMap.Merge(dst, src)
}
func (m *UpdateMap) XXX_Size() int {
	return xxx_messageInfo_UpdateMap.Size(m)
}
func (m *UpdateMap) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMap.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMap proto.InternalMessageInfo

func (m *UpdateMap) GetEtag() string {
	if m != nil {
		return m.Etag
	}
	return ""
}

func (m *UpdateMap) GetMapId() string {
	if m != nil {
		return m.MapId
	}
	return ""
}

func (m *UpdateMap) GetMap() *Map {
	if m != nil {
		return m.Map
	}
	return nil
}

type UpdateMapSharing struct {
	Etag  string `protobuf:"bytes,1,opt,name=etag" json:"etag,omitempty"`
	MapId string `protobuf:"bytes,2,opt,name=map_id,json=mapId" json:"map_id,omitempty"`
	// NOTE: Don't forget to pass nonempty owner ID.
	// Otherwise, ownership will be passed to current user.
	Sharing              *Sharing `protobuf:"bytes,3,opt,name=sharing" json:"sharing,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateMapSharing) Reset()         { *m = UpdateMapSharing{} }
func (m *UpdateMapSharing) String() string { return proto.CompactTextString(m) }
func (*UpdateMapSharing) ProtoMessage()    {}
func (*UpdateMapSharing) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{24}
}
func (m *UpdateMapSharing) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateMapSharing.Unmarshal(m, b)
}
func (m *UpdateMapSharing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateMapSharing.Marshal(b, m, deterministic)
}
func (dst *UpdateMapSharing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMapSharing.Merge(dst, src)
}
func (m *UpdateMapSharing) XXX_Size() int {
	return xxx_messageInfo_UpdateMapSharing.Size(m)
}
func (m *UpdateMapSharing) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMapSharing.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMapSharing proto.InternalMessageInfo

func (m *UpdateMapSharing) GetEtag() string {
	if m != nil {
		return m.Etag
	}
	return ""
}

func (m *UpdateMapSharing) GetMapId() string {
	if m != nil {
		return m.MapId
	}
	return ""
}

func (m *UpdateMapSharing) GetSharing() *Sharing {
	if m != nil {
		return m.Sharing
	}
	return nil
}

type UpdateMapImage struct {
	// Map ETag
	Etag  string `protobuf:"bytes,1,opt,name=etag" json:"etag,omitempty"`
	MapId string `protobuf:"bytes,2,opt,name=map_id,json=mapId" json:"map_id,omitempty"`
	// Note: don't forget to pass image ETag
	Image                *MapImage `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *UpdateMapImage) Reset()         { *m = UpdateMapImage{} }
func (m *UpdateMapImage) String() string { return proto.CompactTextString(m) }
func (*UpdateMapImage) ProtoMessage()    {}
func (*UpdateMapImage) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{25}
}
func (m *UpdateMapImage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateMapImage.Unmarshal(m, b)
}
func (m *UpdateMapImage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateMapImage.Marshal(b, m, deterministic)
}
func (dst *UpdateMapImage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMapImage.Merge(dst, src)
}
func (m *UpdateMapImage) XXX_Size() int {
	return xxx_messageInfo_UpdateMapImage.Size(m)
}
func (m *UpdateMapImage) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMapImage.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMapImage proto.InternalMessageInfo

func (m *UpdateMapImage) GetEtag() string {
	if m != nil {
		return m.Etag
	}
	return ""
}

func (m *UpdateMapImage) GetMapId() string {
	if m != nil {
		return m.MapId
	}
	return ""
}

func (m *UpdateMapImage) GetImage() *MapImage {
	if m != nil {
		return m.Image
	}
	return nil
}

type UpdateMapsOrder struct {
	MapId                string   `protobuf:"bytes,1,opt,name=map_id,json=mapId" json:"map_id,omitempty"`
	Position             int32    `protobuf:"varint,2,opt,name=position" json:"position,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateMapsOrder) Reset()         { *m = UpdateMapsOrder{} }
func (m *UpdateMapsOrder) String() string { return proto.CompactTextString(m) }
func (*UpdateMapsOrder) ProtoMessage()    {}
func (*UpdateMapsOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{26}
}
func (m *UpdateMapsOrder) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateMapsOrder.Unmarshal(m, b)
}
func (m *UpdateMapsOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateMapsOrder.Marshal(b, m, deterministic)
}
func (dst *UpdateMapsOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMapsOrder.Merge(dst, src)
}
func (m *UpdateMapsOrder) XXX_Size() int {
	return xxx_messageInfo_UpdateMapsOrder.Size(m)
}
func (m *UpdateMapsOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMapsOrder.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMapsOrder proto.InternalMessageInfo

func (m *UpdateMapsOrder) GetMapId() string {
	if m != nil {
		return m.MapId
	}
	return ""
}

func (m *UpdateMapsOrder) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

type ChangeMapsRequest struct {
	Created []*CreateMap `protobuf:"bytes,1,rep,name=created" json:"created,omitempty"`
	Updated []*UpdateMap `protobuf:"bytes,2,rep,name=updated" json:"updated,omitempty"`
	// Specify list of maps id's to remove
	Removed        []string            `protobuf:"bytes,3,rep,name=removed" json:"removed,omitempty"`
	UpdatedSharing []*UpdateMapSharing `protobuf:"bytes,4,rep,name=updated_sharing,json=updatedSharing" json:"updated_sharing,omitempty"`
	UpdatedImages  []*UpdateMapImage   `protobuf:"bytes,5,rep,name=updated_images,json=updatedImages" json:"updated_images,omitempty"`
	// Change order by specifying new position for specific maps
	UpdatedOrders        []*UpdateMapsOrder `protobuf:"bytes,6,rep,name=updated_orders,json=updatedOrders" json:"updated_orders,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ChangeMapsRequest) Reset()         { *m = ChangeMapsRequest{} }
func (m *ChangeMapsRequest) String() string { return proto.CompactTextString(m) }
func (*ChangeMapsRequest) ProtoMessage()    {}
func (*ChangeMapsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{27}
}
func (m *ChangeMapsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangeMapsRequest.Unmarshal(m, b)
}
func (m *ChangeMapsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangeMapsRequest.Marshal(b, m, deterministic)
}
func (dst *ChangeMapsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeMapsRequest.Merge(dst, src)
}
func (m *ChangeMapsRequest) XXX_Size() int {
	return xxx_messageInfo_ChangeMapsRequest.Size(m)
}
func (m *ChangeMapsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeMapsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeMapsRequest proto.InternalMessageInfo

func (m *ChangeMapsRequest) GetCreated() []*CreateMap {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *ChangeMapsRequest) GetUpdated() []*UpdateMap {
	if m != nil {
		return m.Updated
	}
	return nil
}

func (m *ChangeMapsRequest) GetRemoved() []string {
	if m != nil {
		return m.Removed
	}
	return nil
}

func (m *ChangeMapsRequest) GetUpdatedSharing() []*UpdateMapSharing {
	if m != nil {
		return m.UpdatedSharing
	}
	return nil
}

func (m *ChangeMapsRequest) GetUpdatedImages() []*UpdateMapImage {
	if m != nil {
		return m.UpdatedImages
	}
	return nil
}

func (m *ChangeMapsRequest) GetUpdatedOrders() []*UpdateMapsOrder {
	if m != nil {
		return m.UpdatedOrders
	}
	return nil
}

type ChangeMapsResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangeMapsResponse) Reset()         { *m = ChangeMapsResponse{} }
func (m *ChangeMapsResponse) String() string { return proto.CompactTextString(m) }
func (*ChangeMapsResponse) ProtoMessage()    {}
func (*ChangeMapsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{28}
}
func (m *ChangeMapsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangeMapsResponse.Unmarshal(m, b)
}
func (m *ChangeMapsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangeMapsResponse.Marshal(b, m, deterministic)
}
func (dst *ChangeMapsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeMapsResponse.Merge(dst, src)
}
func (m *ChangeMapsResponse) XXX_Size() int {
	return xxx_messageInfo_ChangeMapsResponse.Size(m)
}
func (m *ChangeMapsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeMapsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeMapsResponse proto.InternalMessageInfo

type GetMapImageRequest struct {
	MapId                string   `protobuf:"bytes,1,opt,name=map_id,json=mapId" json:"map_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMapImageRequest) Reset()         { *m = GetMapImageRequest{} }
func (m *GetMapImageRequest) String() string { return proto.CompactTextString(m) }
func (*GetMapImageRequest) ProtoMessage()    {}
func (*GetMapImageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{29}
}
func (m *GetMapImageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMapImageRequest.Unmarshal(m, b)
}
func (m *GetMapImageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMapImageRequest.Marshal(b, m, deterministic)
}
func (dst *GetMapImageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMapImageRequest.Merge(dst, src)
}
func (m *GetMapImageRequest) XXX_Size() int {
	return xxx_messageInfo_GetMapImageRequest.Size(m)
}
func (m *GetMapImageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMapImageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMapImageRequest proto.InternalMessageInfo

func (m *GetMapImageRequest) GetMapId() string {
	if m != nil {
		return m.MapId
	}
	return ""
}

type GetMapImageResponse struct {
	Image                *MapImage `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetMapImageResponse) Reset()         { *m = GetMapImageResponse{} }
func (m *GetMapImageResponse) String() string { return proto.CompactTextString(m) }
func (*GetMapImageResponse) ProtoMessage()    {}
func (*GetMapImageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{30}
}
func (m *GetMapImageResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMapImageResponse.Unmarshal(m, b)
}
func (m *GetMapImageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMapImageResponse.Marshal(b, m, deterministic)
}
func (dst *GetMapImageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMapImageResponse.Merge(dst, src)
}
func (m *GetMapImageResponse) XXX_Size() int {
	return xxx_messageInfo_GetMapImageResponse.Size(m)
}
func (m *GetMapImageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMapImageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMapImageResponse proto.InternalMessageInfo

func (m *GetMapImageResponse) GetImage() *MapImage {
	if m != nil {
		return m.Image
	}
	return nil
}

type GetMarkersRequest struct {
	MapId                string   `protobuf:"bytes,1,opt,name=map_id,json=mapId" json:"map_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMarkersRequest) Reset()         { *m = GetMarkersRequest{} }
func (m *GetMarkersRequest) String() string { return proto.CompactTextString(m) }
func (*GetMarkersRequest) ProtoMessage()    {}
func (*GetMarkersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{31}
}
func (m *GetMarkersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMarkersRequest.Unmarshal(m, b)
}
func (m *GetMarkersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMarkersRequest.Marshal(b, m, deterministic)
}
func (dst *GetMarkersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMarkersRequest.Merge(dst, src)
}
func (m *GetMarkersRequest) XXX_Size() int {
	return xxx_messageInfo_GetMarkersRequest.Size(m)
}
func (m *GetMarkersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMarkersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMarkersRequest proto.InternalMessageInfo

func (m *GetMarkersRequest) GetMapId() string {
	if m != nil {
		return m.MapId
	}
	return ""
}

type GetMarkersResponse struct {
	Markers              map[string]*Marker `protobuf:"bytes,1,rep,name=markers" json:"markers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GetMarkersResponse) Reset()         { *m = GetMarkersResponse{} }
func (m *GetMarkersResponse) String() string { return proto.CompactTextString(m) }
func (*GetMarkersResponse) ProtoMessage()    {}
func (*GetMarkersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{32}
}
func (m *GetMarkersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMarkersResponse.Unmarshal(m, b)
}
func (m *GetMarkersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMarkersResponse.Marshal(b, m, deterministic)
}
func (dst *GetMarkersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMarkersResponse.Merge(dst, src)
}
func (m *GetMarkersResponse) XXX_Size() int {
	return xxx_messageInfo_GetMarkersResponse.Size(m)
}
func (m *GetMarkersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMarkersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMarkersResponse proto.InternalMessageInfo

func (m *GetMarkersResponse) GetMarkers() map[string]*Marker {
	if m != nil {
		return m.Markers
	}
	return nil
}

type UpdateMarkers struct {
	MapId string `protobuf:"bytes,1,opt,name=map_id,json=mapId" json:"map_id,omitempty"`
	// Pass here newly created or modified markers of the map
	Updated []*Marker `protobuf:"bytes,2,rep,name=updated" json:"updated,omitempty"`
	// Pass a list of component which have markers that must be removed
	// out of the map
	Removed              []string `protobuf:"bytes,3,rep,name=removed" json:"removed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateMarkers) Reset()         { *m = UpdateMarkers{} }
func (m *UpdateMarkers) String() string { return proto.CompactTextString(m) }
func (*UpdateMarkers) ProtoMessage()    {}
func (*UpdateMarkers) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{33}
}
func (m *UpdateMarkers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateMarkers.Unmarshal(m, b)
}
func (m *UpdateMarkers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateMarkers.Marshal(b, m, deterministic)
}
func (dst *UpdateMarkers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMarkers.Merge(dst, src)
}
func (m *UpdateMarkers) XXX_Size() int {
	return xxx_messageInfo_UpdateMarkers.Size(m)
}
func (m *UpdateMarkers) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMarkers.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMarkers proto.InternalMessageInfo

func (m *UpdateMarkers) GetMapId() string {
	if m != nil {
		return m.MapId
	}
	return ""
}

func (m *UpdateMarkers) GetUpdated() []*Marker {
	if m != nil {
		return m.Updated
	}
	return nil
}

func (m *UpdateMarkers) GetRemoved() []string {
	if m != nil {
		return m.Removed
	}
	return nil
}

type UpdateMarkersRequest struct {
	Changed              []*UpdateMarkers `protobuf:"bytes,1,rep,name=changed" json:"changed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *UpdateMarkersRequest) Reset()         { *m = UpdateMarkersRequest{} }
func (m *UpdateMarkersRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateMarkersRequest) ProtoMessage()    {}
func (*UpdateMarkersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{34}
}
func (m *UpdateMarkersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateMarkersRequest.Unmarshal(m, b)
}
func (m *UpdateMarkersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateMarkersRequest.Marshal(b, m, deterministic)
}
func (dst *UpdateMarkersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMarkersRequest.Merge(dst, src)
}
func (m *UpdateMarkersRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateMarkersRequest.Size(m)
}
func (m *UpdateMarkersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMarkersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMarkersRequest proto.InternalMessageInfo

func (m *UpdateMarkersRequest) GetChanged() []*UpdateMarkers {
	if m != nil {
		return m.Changed
	}
	return nil
}

type UpdateMarkersResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateMarkersResponse) Reset()         { *m = UpdateMarkersResponse{} }
func (m *UpdateMarkersResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateMarkersResponse) ProtoMessage()    {}
func (*UpdateMarkersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{35}
}
func (m *UpdateMarkersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateMarkersResponse.Unmarshal(m, b)
}
func (m *UpdateMarkersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateMarkersResponse.Marshal(b, m, deterministic)
}
func (dst *UpdateMarkersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMarkersResponse.Merge(dst, src)
}
func (m *UpdateMarkersResponse) XXX_Size() int {
	return xxx_messageInfo_UpdateMarkersResponse.Size(m)
}
func (m *UpdateMarkersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMarkersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMarkersResponse proto.InternalMessageInfo

type GetMapsByComponentRequest struct {
	View                 EViewMode `protobuf:"varint,1,opt,name=view,enum=axxonsoft.bl.maps.EViewMode" json:"view,omitempty"`
	ComponentName        string    `protobuf:"bytes,2,opt,name=component_name,json=componentName" json:"component_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *GetMapsByComponentRequest) Reset()         { *m = GetMapsByComponentRequest{} }
func (m *GetMapsByComponentRequest) String() string { return proto.CompactTextString(m) }
func (*GetMapsByComponentRequest) ProtoMessage()    {}
func (*GetMapsByComponentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{36}
}
func (m *GetMapsByComponentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMapsByComponentRequest.Unmarshal(m, b)
}
func (m *GetMapsByComponentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMapsByComponentRequest.Marshal(b, m, deterministic)
}
func (dst *GetMapsByComponentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMapsByComponentRequest.Merge(dst, src)
}
func (m *GetMapsByComponentRequest) XXX_Size() int {
	return xxx_messageInfo_GetMapsByComponentRequest.Size(m)
}
func (m *GetMapsByComponentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMapsByComponentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMapsByComponentRequest proto.InternalMessageInfo

func (m *GetMapsByComponentRequest) GetView() EViewMode {
	if m != nil {
		return m.View
	}
	return EViewMode_VIEW_MODE_ONLY_META
}

func (m *GetMapsByComponentRequest) GetComponentName() string {
	if m != nil {
		return m.ComponentName
	}
	return ""
}

type GetMapsByComponentResponse struct {
	Items                []*MapFull `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GetMapsByComponentResponse) Reset()         { *m = GetMapsByComponentResponse{} }
func (m *GetMapsByComponentResponse) String() string { return proto.CompactTextString(m) }
func (*GetMapsByComponentResponse) ProtoMessage()    {}
func (*GetMapsByComponentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_MapService_0c070aa45340c67c, []int{37}
}
func (m *GetMapsByComponentResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMapsByComponentResponse.Unmarshal(m, b)
}
func (m *GetMapsByComponentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMapsByComponentResponse.Marshal(b, m, deterministic)
}
func (dst *GetMapsByComponentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMapsByComponentResponse.Merge(dst, src)
}
func (m *GetMapsByComponentResponse) XXX_Size() int {
	return xxx_messageInfo_GetMapsByComponentResponse.Size(m)
}
func (m *GetMapsByComponentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMapsByComponentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMapsByComponentResponse proto.InternalMessageInfo

func (m *GetMapsByComponentResponse) GetItems() []*MapFull {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*FieldOfView)(nil), "axxonsoft.bl.maps.FieldOfView")
	proto.RegisterType((*ImmersionModePointsLink)(nil), "axxonsoft.bl.maps.ImmersionModePointsLink")
	proto.RegisterType((*ImmersionData)(nil), "axxonsoft.bl.maps.ImmersionData")
	proto.RegisterType((*VideoFrameArrangement)(nil), "axxonsoft.bl.maps.VideoFrameArrangement")
	proto.RegisterType((*CameraMarker)(nil), "axxonsoft.bl.maps.CameraMarker")
	proto.RegisterType((*RelayMarker)(nil), "axxonsoft.bl.maps.RelayMarker")
	proto.RegisterType((*SensorMarker)(nil), "axxonsoft.bl.maps.SensorMarker")
	proto.RegisterType((*DeviceNodeMarker)(nil), "axxonsoft.bl.maps.DeviceNodeMarker")
	proto.RegisterType((*ComponentMarker)(nil), "axxonsoft.bl.maps.ComponentMarker")
	proto.RegisterType((*TransitionMarker)(nil), "axxonsoft.bl.maps.TransitionMarker")
	proto.RegisterType((*ImmersionModeMarker)(nil), "axxonsoft.bl.maps.ImmersionModeMarker")
	proto.RegisterType((*Marker)(nil), "axxonsoft.bl.maps.Marker")
	proto.RegisterType((*MapImageMeta)(nil), "axxonsoft.bl.maps.MapImageMeta")
	proto.RegisterType((*Map)(nil), "axxonsoft.bl.maps.Map")
	proto.RegisterType((*Sharing)(nil), "axxonsoft.bl.maps.Sharing")
	proto.RegisterType((*MapMeta)(nil), "axxonsoft.bl.maps.MapMeta")
	proto.RegisterType((*MapFull)(nil), "axxonsoft.bl.maps.MapFull")
	proto.RegisterType((*MapImage)(nil), "axxonsoft.bl.maps.MapImage")
	proto.RegisterType((*ListMapsRequest)(nil), "axxonsoft.bl.maps.ListMapsRequest")
	proto.RegisterType((*ListMapsResponse)(nil), "axxonsoft.bl.maps.ListMapsResponse")
	proto.RegisterType((*BatchGetMapsRequest)(nil), "axxonsoft.bl.maps.BatchGetMapsRequest")
	proto.RegisterType((*BatchGetMapsResponse)(nil), "axxonsoft.bl.maps.BatchGetMapsResponse")
	proto.RegisterType((*CreateMap)(nil), "axxonsoft.bl.maps.CreateMap")
	proto.RegisterType((*UpdateMap)(nil), "axxonsoft.bl.maps.UpdateMap")
	proto.RegisterType((*UpdateMapSharing)(nil), "axxonsoft.bl.maps.UpdateMapSharing")
	proto.RegisterType((*UpdateMapImage)(nil), "axxonsoft.bl.maps.UpdateMapImage")
	proto.RegisterType((*UpdateMapsOrder)(nil), "axxonsoft.bl.maps.UpdateMapsOrder")
	proto.RegisterType((*ChangeMapsRequest)(nil), "axxonsoft.bl.maps.ChangeMapsRequest")
	proto.RegisterType((*ChangeMapsResponse)(nil), "axxonsoft.bl.maps.ChangeMapsResponse")
	proto.RegisterType((*GetMapImageRequest)(nil), "axxonsoft.bl.maps.GetMapImageRequest")
	proto.RegisterType((*GetMapImageResponse)(nil), "axxonsoft.bl.maps.GetMapImageResponse")
	proto.RegisterType((*GetMarkersRequest)(nil), "axxonsoft.bl.maps.GetMarkersRequest")
	proto.RegisterType((*GetMarkersResponse)(nil), "axxonsoft.bl.maps.GetMarkersResponse")
	proto.RegisterMapType((map[string]*Marker)(nil), "axxonsoft.bl.maps.GetMarkersResponse.MarkersEntry")
	proto.RegisterType((*UpdateMarkers)(nil), "axxonsoft.bl.maps.UpdateMarkers")
	proto.RegisterType((*UpdateMarkersRequest)(nil), "axxonsoft.bl.maps.UpdateMarkersRequest")
	proto.RegisterType((*UpdateMarkersResponse)(nil), "axxonsoft.bl.maps.UpdateMarkersResponse")
	proto.RegisterType((*GetMapsByComponentRequest)(nil), "axxonsoft.bl.maps.GetMapsByComponentRequest")
	proto.RegisterType((*GetMapsByComponentResponse)(nil), "axxonsoft.bl.maps.GetMapsByComponentResponse")
	proto.RegisterEnum("axxonsoft.bl.maps.EMapType", EMapType_name, EMapType_value)
	proto.RegisterEnum("axxonsoft.bl.maps.EViewMode", EViewMode_name, EViewMode_value)
	proto.RegisterEnum("axxonsoft.bl.maps.ComponentMarker_EPinEdge", ComponentMarker_EPinEdge_name, ComponentMarker_EPinEdge_value)
	proto.RegisterEnum("axxonsoft.bl.maps.Sharing_ESharingKind", Sharing_ESharingKind_name, Sharing_ESharingKind_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MapService service

type MapServiceClient interface {
	// Enums all maps in domain.
	ListMaps(ctx context.Context, in *ListMapsRequest, opts ...grpc.CallOption) (*ListMapsResponse, error)
	// Fast lookup for specified maps.
	BatchGetMaps(ctx context.Context, in *BatchGetMapsRequest, opts ...grpc.CallOption) (*BatchGetMapsResponse, error)
	// Modifies maps in domain.
	ChangeMaps(ctx context.Context, in *ChangeMapsRequest, opts ...grpc.CallOption) (*ChangeMapsResponse, error)
	// Returns image by map id
	GetMapImage(ctx context.Context, in *GetMapImageRequest, opts ...grpc.CallOption) (*GetMapImageResponse, error)
	// Returns list of markers on a map
	GetMarkers(ctx context.Context, in *GetMarkersRequest, opts ...grpc.CallOption) (*GetMarkersResponse, error)
	// Update list of markers on a map
	UpdateMarkers(ctx context.Context, in *UpdateMarkersRequest, opts ...grpc.CallOption) (*UpdateMarkersResponse, error)
	// Returns maps which contain markers associated with the component
	GetMapsByComponent(ctx context.Context, in *GetMapsByComponentRequest, opts ...grpc.CallOption) (*GetMapsByComponentResponse, error)
}

type mapServiceClient struct {
	cc *grpc.ClientConn
}

func NewMapServiceClient(cc *grpc.ClientConn) MapServiceClient {
	return &mapServiceClient{cc}
}

func (c *mapServiceClient) ListMaps(ctx context.Context, in *ListMapsRequest, opts ...grpc.CallOption) (*ListMapsResponse, error) {
	out := new(ListMapsResponse)
	err := grpc.Invoke(ctx, "/axxonsoft.bl.maps.MapService/ListMaps", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapServiceClient) BatchGetMaps(ctx context.Context, in *BatchGetMapsRequest, opts ...grpc.CallOption) (*BatchGetMapsResponse, error) {
	out := new(BatchGetMapsResponse)
	err := grpc.Invoke(ctx, "/axxonsoft.bl.maps.MapService/BatchGetMaps", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapServiceClient) ChangeMaps(ctx context.Context, in *ChangeMapsRequest, opts ...grpc.CallOption) (*ChangeMapsResponse, error) {
	out := new(ChangeMapsResponse)
	err := grpc.Invoke(ctx, "/axxonsoft.bl.maps.MapService/ChangeMaps", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapServiceClient) GetMapImage(ctx context.Context, in *GetMapImageRequest, opts ...grpc.CallOption) (*GetMapImageResponse, error) {
	out := new(GetMapImageResponse)
	err := grpc.Invoke(ctx, "/axxonsoft.bl.maps.MapService/GetMapImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapServiceClient) GetMarkers(ctx context.Context, in *GetMarkersRequest, opts ...grpc.CallOption) (*GetMarkersResponse, error) {
	out := new(GetMarkersResponse)
	err := grpc.Invoke(ctx, "/axxonsoft.bl.maps.MapService/GetMarkers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapServiceClient) UpdateMarkers(ctx context.Context, in *UpdateMarkersRequest, opts ...grpc.CallOption) (*UpdateMarkersResponse, error) {
	out := new(UpdateMarkersResponse)
	err := grpc.Invoke(ctx, "/axxonsoft.bl.maps.MapService/UpdateMarkers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapServiceClient) GetMapsByComponent(ctx context.Context, in *GetMapsByComponentRequest, opts ...grpc.CallOption) (*GetMapsByComponentResponse, error) {
	out := new(GetMapsByComponentResponse)
	err := grpc.Invoke(ctx, "/axxonsoft.bl.maps.MapService/GetMapsByComponent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MapService service

type MapServiceServer interface {
	// Enums all maps in domain.
	ListMaps(context.Context, *ListMapsRequest) (*ListMapsResponse, error)
	// Fast lookup for specified maps.
	BatchGetMaps(context.Context, *BatchGetMapsRequest) (*BatchGetMapsResponse, error)
	// Modifies maps in domain.
	ChangeMaps(context.Context, *ChangeMapsRequest) (*ChangeMapsResponse, error)
	// Returns image by map id
	GetMapImage(context.Context, *GetMapImageRequest) (*GetMapImageResponse, error)
	// Returns list of markers on a map
	GetMarkers(context.Context, *GetMarkersRequest) (*GetMarkersResponse, error)
	// Update list of markers on a map
	UpdateMarkers(context.Context, *UpdateMarkersRequest) (*UpdateMarkersResponse, error)
	// Returns maps which contain markers associated with the component
	GetMapsByComponent(context.Context, *GetMapsByComponentRequest) (*GetMapsByComponentResponse, error)
}

func RegisterMapServiceServer(s *grpc.Server, srv MapServiceServer) {
	s.RegisterService(&_MapService_serviceDesc, srv)
}

func _MapService_ListMaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMapsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServiceServer).ListMaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axxonsoft.bl.maps.MapService/ListMaps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServiceServer).ListMaps(ctx, req.(*ListMapsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapService_BatchGetMaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetMapsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServiceServer).BatchGetMaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axxonsoft.bl.maps.MapService/BatchGetMaps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServiceServer).BatchGetMaps(ctx, req.(*BatchGetMapsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapService_ChangeMaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeMapsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServiceServer).ChangeMaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axxonsoft.bl.maps.MapService/ChangeMaps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServiceServer).ChangeMaps(ctx, req.(*ChangeMapsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapService_GetMapImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMapImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServiceServer).GetMapImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axxonsoft.bl.maps.MapService/GetMapImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServiceServer).GetMapImage(ctx, req.(*GetMapImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapService_GetMarkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarkersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServiceServer).GetMarkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axxonsoft.bl.maps.MapService/GetMarkers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServiceServer).GetMarkers(ctx, req.(*GetMarkersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapService_UpdateMarkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMarkersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServiceServer).UpdateMarkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axxonsoft.bl.maps.MapService/UpdateMarkers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServiceServer).UpdateMarkers(ctx, req.(*UpdateMarkersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapService_GetMapsByComponent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMapsByComponentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServiceServer).GetMapsByComponent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/axxonsoft.bl.maps.MapService/GetMapsByComponent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServiceServer).GetMapsByComponent(ctx, req.(*GetMapsByComponentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MapService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "axxonsoft.bl.maps.MapService",
	HandlerType: (*MapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListMaps",
			Handler:    _MapService_ListMaps_Handler,
		},
		{
			MethodName: "BatchGetMaps",
			Handler:    _MapService_BatchGetMaps_Handler,
		},
		{
			MethodName: "ChangeMaps",
			Handler:    _MapService_ChangeMaps_Handler,
		},
		{
			MethodName: "GetMapImage",
			Handler:    _MapService_GetMapImage_Handler,
		},
		{
			MethodName: "GetMarkers",
			Handler:    _MapService_GetMarkers_Handler,
		},
		{
			MethodName: "UpdateMarkers",
			Handler:    _MapService_UpdateMarkers_Handler,
		},
		{
			MethodName: "GetMapsByComponent",
			Handler:    _MapService_GetMapsByComponent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "axxonsoft/bl/maps/MapService.proto",
}

func init() {
	proto.RegisterFile("axxonsoft/bl/maps/MapService.proto", fileDescriptor_MapService_0c070aa45340c67c)
}

var fileDescriptor_MapService_0c070aa45340c67c = []byte{
	// 2275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x59, 0xcb, 0x72, 0xdb, 0xc8,
	0xd5, 0x16, 0x44, 0x4a, 0xa2, 0x0e, 0x2f, 0x82, 0x5a, 0xd2, 0x88, 0xa6, 0x67, 0x7e, 0xcb, 0xf0,
	0x78, 0xac, 0xd2, 0xfc, 0x43, 0xc6, 0x72, 0x6a, 0x6a, 0x46, 0x93, 0x72, 0x45, 0x17, 0x4a, 0x62,
	0x59, 0x24, 0x95, 0x16, 0xed, 0x94, 0xa7, 0x52, 0x05, 0xb7, 0x88, 0x16, 0xd5, 0x25, 0xe2, 0x12,
	0x00, 0x92, 0x2d, 0xaf, 0x52, 0x59, 0xe4, 0x01, 0x92, 0x87, 0xc8, 0x2a, 0x0f, 0x90, 0xca, 0x43,
	0x64, 0x91, 0x45, 0xf6, 0x49, 0xb6, 0xa9, 0x6c, 0xb2, 0xca, 0x2a, 0xd5, 0x17, 0x80, 0x20, 0x0d,
	0x8a, 0x1c, 0x67, 0x87, 0x3e, 0x38, 0xf7, 0xf3, 0xf5, 0xd7, 0x0d, 0x12, 0x0c, 0xf2, 0xee, 0x9d,
	0xeb, 0x04, 0xee, 0x45, 0x58, 0x3b, 0xef, 0xd7, 0x6c, 0xe2, 0x05, 0xb5, 0x26, 0xf1, 0xce, 0xa8,
	0x7f, 0xc3, 0xba, 0xb4, 0xea, 0xf9, 0x6e, 0xe8, 0xa2, 0xe5, 0x58, 0xa7, 0x7a, 0xde, 0xaf, 0x72,
	0x9d, 0xca, 0xa7, 0x3d, 0xd7, 0xed, 0xf5, 0x69, 0x8d, 0x78, 0xac, 0x46, 0x1c, 0xc7, 0x0d, 0x49,
	0xc8, 0x5c, 0x27, 0x90, 0x06, 0x95, 0xaf, 0x86, 0x9c, 0x06, 0xb4, 0x7b, 0xed, 0xb3, 0xf0, 0xb6,
	0x76, 0xd4, 0x77, 0xcf, 0x49, 0xff, 0x94, 0xfa, 0x36, 0x0b, 0x82, 0x84, 0xfa, 0x93, 0x21, 0x75,
	0xcf, 0x67, 0x36, 0x0b, 0xd9, 0x0d, 0xad, 0x9d, 0x46, 0x4f, 0x4a, 0xd1, 0x78, 0x03, 0xf9, 0x43,
	0x46, 0xfb, 0x56, 0xfb, 0xe2, 0x15, 0xa3, 0x6f, 0xd1, 0x2a, 0xcc, 0x11, 0xa7, 0xd7, 0xa7, 0x65,
	0x6d, 0x43, 0xdb, 0xd4, 0xb0, 0x5c, 0xa0, 0xef, 0x60, 0xd1, 0x62, 0x3e, 0xed, 0xf2, 0x84, 0xca,
	0xb3, 0x1b, 0xda, 0x66, 0x7e, 0xfb, 0xb3, 0xea, 0x50, 0x05, 0x71, 0x84, 0xea, 0xa9, 0xcb, 0x9c,
	0x10, 0x0f, 0xf4, 0x8d, 0x7f, 0x6a, 0xb0, 0xde, 0xb0, 0x6d, 0xea, 0xf3, 0xfc, 0x9a, 0xae, 0x45,
	0x85, 0x46, 0x70, 0xc2, 0x9c, 0x2b, 0xf4, 0x1c, 0xf2, 0x37, 0xcc, 0xa2, 0xae, 0xe9, 0x71, 0x99,
	0x08, 0x3a, 0xd1, 0x35, 0x08, 0x0b, 0xf1, 0x8c, 0x5e, 0x41, 0x59, 0xda, 0xdb, 0xae, 0xc3, 0x42,
	0xd7, 0x37, 0x6f, 0x18, 0x7d, 0xab, 0x9c, 0x4d, 0x95, 0xe7, 0x9a, 0x30, 0x6f, 0x4a, 0x6b, 0xde,
	0x01, 0xe9, 0x77, 0x07, 0x16, 0x6d, 0xe2, 0x29, 0x47, 0x99, 0x69, 0x1c, 0xe5, 0x6c, 0xe2, 0x89,
	0x27, 0xe3, 0x4f, 0x1a, 0x14, 0xe3, 0x7a, 0x0f, 0x48, 0x48, 0xd0, 0xb7, 0x90, 0xf3, 0xdc, 0x80,
	0x89, 0xee, 0x4d, 0x55, 0x62, 0xac, 0x8e, 0xee, 0x41, 0xee, 0x92, 0x04, 0xe6, 0x7b, 0xd7, 0xb5,
	0x45, 0x41, 0x39, 0xbc, 0x70, 0x49, 0x82, 0xef, 0x5d, 0xd7, 0x46, 0x08, 0xb2, 0x42, 0xcc, 0xd3,
	0x9b, 0xc3, 0xe2, 0x19, 0xfd, 0x14, 0xe6, 0xfa, 0xcc, 0xb9, 0x0a, 0xca, 0xb0, 0x91, 0xd9, 0xcc,
	0x6f, 0x6f, 0x55, 0x3f, 0x80, 0x59, 0x75, 0xcc, 0x28, 0xb0, 0x34, 0x34, 0xba, 0xb0, 0xf6, 0x8a,
	0xb7, 0xe4, 0xd0, 0x27, 0x36, 0xdd, 0xf5, 0x7d, 0xe2, 0xf4, 0xa8, 0x4d, 0x9d, 0x10, 0x95, 0x61,
	0x81, 0x39, 0xdd, 0x3e, 0x73, 0x22, 0x6c, 0x44, 0x4b, 0x54, 0x81, 0x9c, 0xc5, 0x82, 0x90, 0x38,
	0x5d, 0x2a, 0x72, 0xd4, 0x70, 0xbc, 0x1e, 0xe0, 0x29, 0x93, 0xc0, 0x93, 0xf1, 0x6f, 0x0d, 0x0a,
	0xfb, 0xc4, 0xa6, 0x3e, 0x69, 0x12, 0xff, 0x8a, 0xfa, 0x68, 0x0f, 0x8a, 0x17, 0x1c, 0x85, 0xa6,
	0x7b, 0x21, 0x46, 0xa8, 0xda, 0xf4, 0x7f, 0x29, 0xf9, 0x27, 0xd0, 0x8a, 0xf3, 0x17, 0x09, 0xe8,
	0x3e, 0x87, 0x45, 0x16, 0xd5, 0xa6, 0x86, 0xbf, 0x71, 0x57, 0xfd, 0x7c, 0x34, 0x78, 0x60, 0x82,
	0xde, 0xc0, 0xba, 0xc4, 0xd2, 0x05, 0x2f, 0xdd, 0x24, 0x83, 0xda, 0x15, 0x02, 0x36, 0x53, 0xbc,
	0xa5, 0xf6, 0x4a, 0xa1, 0x6a, 0x54, 0x6c, 0x14, 0x21, 0x8f, 0x69, 0x9f, 0xdc, 0xca, 0xa2, 0x8d,
	0x12, 0x14, 0xce, 0xa8, 0x13, 0xb8, 0xbe, 0x5a, 0xff, 0x5e, 0x03, 0xfd, 0x80, 0x72, 0x92, 0x68,
	0xb9, 0x16, 0x55, 0x9d, 0xb9, 0x0f, 0x8b, 0xac, 0xeb, 0x3a, 0x81, 0x79, 0x45, 0x6f, 0x45, 0x57,
	0x16, 0x71, 0x4e, 0x08, 0x5e, 0xd0, 0x5b, 0xfe, 0x92, 0x4f, 0x40, 0xbe, 0x9c, 0x95, 0x2f, 0x85,
	0x40, 0xbd, 0x24, 0xd7, 0xa1, 0x6b, 0xba, 0x1e, 0x75, 0x44, 0x05, 0x39, 0x9c, 0xe3, 0x82, 0xb6,
	0x47, 0x1d, 0xf4, 0x13, 0x00, 0xae, 0xa8, 0x10, 0x9e, 0x9d, 0x6a, 0x4b, 0x73, 0x03, 0x09, 0xf1,
	0xbf, 0x66, 0x61, 0x69, 0xdf, 0xb5, 0x3d, 0xd7, 0xa1, 0x4e, 0xa8, 0x12, 0xdd, 0x86, 0x35, 0x8f,
	0xf8, 0xd4, 0x09, 0xcd, 0x6e, 0xf4, 0xc6, 0x74, 0x88, 0x4d, 0x55, 0xd2, 0x2b, 0xf2, 0x65, 0x6c,
	0xd5, 0x22, 0x36, 0xe5, 0x29, 0x7a, 0xcc, 0x71, 0xa8, 0x65, 0x86, 0x6e, 0x94, 0xbf, 0x14, 0x74,
	0x5c, 0xf4, 0x33, 0x28, 0xc5, 0x2f, 0x4d, 0x6a, 0xf5, 0x24, 0x86, 0x4a, 0xdb, 0x5f, 0xa6, 0x8c,
	0x61, 0x24, 0x99, 0x6a, 0xfd, 0x94, 0x39, 0x75, 0xab, 0x47, 0x71, 0x21, 0x72, 0xc7, 0x57, 0xe8,
	0x2b, 0x58, 0xf1, 0x98, 0xc3, 0xfd, 0x75, 0x05, 0xfa, 0x4c, 0xe6, 0x58, 0xf4, 0x9d, 0x28, 0x7f,
	0x0e, 0xeb, 0x1e, 0x73, 0x3a, 0xae, 0x84, 0x65, 0x83, 0xcb, 0x87, 0x80, 0x3d, 0x27, 0x74, 0x06,
	0xc0, 0xde, 0x87, 0x82, 0xcf, 0x67, 0x69, 0xda, 0x22, 0x62, 0x19, 0xc6, 0x02, 0x36, 0x31, 0xf2,
	0xe3, 0x19, 0x9c, 0xf7, 0x07, 0x4b, 0x74, 0x08, 0xc5, 0x40, 0x20, 0x20, 0xf2, 0x92, 0x17, 0x5e,
	0x1e, 0xa4, 0x78, 0x49, 0x22, 0xe5, 0x78, 0x06, 0x17, 0x82, 0xc4, 0x1a, 0x9d, 0x01, 0xb2, 0x04,
	0x70, 0x4c, 0xc7, 0xb5, 0x68, 0xe4, 0xac, 0x20, 0x9c, 0x3d, 0x4a, 0x71, 0x36, 0x8a, 0xb2, 0xe3,
	0x19, 0xac, 0x5b, 0x23, 0x32, 0xe3, 0x0a, 0x72, 0x51, 0x1b, 0xd1, 0x32, 0x14, 0x4f, 0x1b, 0x2d,
	0xb3, 0x7e, 0x70, 0x54, 0x37, 0x5b, 0xed, 0x56, 0x5d, 0x9f, 0x19, 0x12, 0x9d, 0xd4, 0x0f, 0x3b,
	0xba, 0x86, 0x74, 0x28, 0xc4, 0xa2, 0x4e, 0xfb, 0x54, 0x9f, 0x45, 0x08, 0x4a, 0xb1, 0x04, 0x37,
	0x8e, 0x8e, 0x3b, 0x7a, 0x06, 0xad, 0xc0, 0x52, 0x2c, 0xdb, 0x6b, 0x77, 0x3a, 0xed, 0xa6, 0x9e,
	0xdd, 0x9b, 0x87, 0x6c, 0x78, 0xeb, 0x51, 0xe3, 0x6b, 0xd0, 0x3b, 0x3e, 0x71, 0x24, 0xfb, 0xa9,
	0xea, 0x0c, 0x28, 0x72, 0x6e, 0xa2, 0x96, 0xc9, 0x39, 0x99, 0x59, 0x0a, 0x51, 0x79, 0x29, 0x6c,
	0x12, 0xaf, 0x61, 0x19, 0x6b, 0xb0, 0x32, 0x44, 0x6c, 0xaa, 0x86, 0xbf, 0x65, 0x60, 0x5e, 0x79,
	0xf9, 0x1f, 0x48, 0xf8, 0x31, 0x94, 0x46, 0x30, 0x2d, 0xb1, 0x5a, 0xec, 0x0e, 0xa1, 0xf9, 0x11,
	0x14, 0x2d, 0x16, 0x78, 0x1c, 0x14, 0x21, 0x0b, 0x15, 0xe7, 0xe5, 0x70, 0x41, 0x09, 0x3b, 0x5c,
	0xc6, 0x47, 0xae, 0xb0, 0x37, 0x04, 0x9c, 0xb4, 0x91, 0x27, 0x19, 0x92, 0x8f, 0xbc, 0x9b, 0x64,
	0xcc, 0x36, 0xe8, 0x83, 0x9c, 0x86, 0xd0, 0x63, 0x4c, 0xde, 0x1f, 0xc7, 0x33, 0x78, 0xa9, 0x3b,
	0xb2, 0x7f, 0x31, 0x2c, 0x87, 0x71, 0xe7, 0x27, 0x43, 0x68, 0x74, 0x4a, 0x1c, 0x42, 0xe1, 0xe8,
	0xe4, 0x7e, 0x01, 0x6b, 0x31, 0xbf, 0x9a, 0x76, 0x02, 0x9a, 0x45, 0xe1, 0xf7, 0x8b, 0x49, 0xc7,
	0x53, 0xec, 0x7a, 0x85, 0x7d, 0x28, 0x8e, 0x31, 0xf3, 0x07, 0x0d, 0x0a, 0x1c, 0x05, 0x36, 0xe9,
	0xd1, 0x26, 0x0d, 0x09, 0xa7, 0x95, 0x0b, 0xd6, 0xa7, 0x49, 0xfa, 0xc9, 0x71, 0x41, 0xc4, 0x39,
	0x36, 0xb3, 0xa9, 0xc9, 0x4d, 0x23, 0xce, 0xe1, 0x82, 0xce, 0xad, 0x47, 0xd1, 0x8f, 0x20, 0x1b,
	0xb0, 0xf7, 0x54, 0x11, 0xfe, 0xa7, 0xe3, 0x00, 0x72, 0xc6, 0xde, 0x53, 0x2c, 0x34, 0xf9, 0x29,
	0x2c, 0xc2, 0x64, 0x85, 0x27, 0xf1, 0x8c, 0x3e, 0x03, 0xe0, 0xef, 0xcc, 0xf3, 0xdb, 0x90, 0x06,
	0x82, 0x39, 0xb2, 0x78, 0x91, 0x4b, 0xf6, 0xb8, 0xc0, 0xf8, 0x8f, 0x06, 0x99, 0x26, 0xf1, 0x62,
	0x53, 0x2d, 0x61, 0x5a, 0x93, 0x35, 0x89, 0xc4, 0x4a, 0xdb, 0xf7, 0x53, 0x1a, 0x54, 0x6f, 0x12,
	0x8f, 0xe7, 0x8a, 0x85, 0xe2, 0x10, 0xac, 0x33, 0x3f, 0x0c, 0xd6, 0xd1, 0x05, 0x22, 0x9b, 0xb8,
	0x40, 0x3c, 0x80, 0xbc, 0xe7, 0xbb, 0xfc, 0xf8, 0xf2, 0xf9, 0x4e, 0x9b, 0x13, 0xa9, 0x41, 0x24,
	0x6a, 0x58, 0xe8, 0x39, 0x00, 0xe3, 0x8d, 0x36, 0x6d, 0x1a, 0x92, 0xf2, 0xfc, 0x58, 0xf0, 0x26,
	0x07, 0xc2, 0x4f, 0x59, 0xf5, 0x68, 0xfc, 0x5d, 0x83, 0x85, 0xb3, 0x4b, 0xe2, 0x33, 0xa7, 0xc7,
	0x2f, 0x07, 0xee, 0x5b, 0x87, 0xfa, 0xaa, 0x03, 0x72, 0x81, 0xbe, 0x83, 0xec, 0x15, 0x73, 0x2c,
	0xd5, 0x82, 0x27, 0x69, 0x5c, 0x28, 0xed, 0xab, 0x75, 0xf5, 0xf0, 0x82, 0x39, 0x16, 0x16, 0x46,
	0xe8, 0x21, 0x14, 0x82, 0x4b, 0xe2, 0x53, 0xcb, 0xf4, 0xdd, 0x3e, 0x0d, 0xca, 0x99, 0x8d, 0x0c,
	0xa7, 0x0a, 0x29, 0xc3, 0x5c, 0x64, 0x9c, 0x43, 0x21, 0x69, 0x88, 0x56, 0x41, 0x3f, 0x3b, 0xde,
	0xc5, 0x8d, 0xd6, 0x91, 0xf9, 0xa2, 0xd1, 0x3a, 0x30, 0x77, 0x5b, 0xaf, 0xf5, 0x19, 0xf4, 0x00,
	0xee, 0x0f, 0x49, 0xcf, 0x4e, 0xeb, 0xfb, 0x8d, 0xc3, 0xc6, 0xbe, 0x89, 0xdb, 0x27, 0xf5, 0x33,
	0x5d, 0x43, 0xf7, 0x61, 0x7d, 0x48, 0xa1, 0xd5, 0xee, 0x98, 0x5c, 0x50, 0x3f, 0xd0, 0x67, 0x45,
	0x95, 0x4d, 0xe2, 0x09, 0x34, 0x96, 0x60, 0x36, 0xe6, 0xac, 0x59, 0x66, 0xa1, 0x6f, 0x61, 0x9e,
	0x74, 0xbb, 0x34, 0x08, 0x54, 0x85, 0x0f, 0x87, 0x2b, 0x8c, 0xae, 0xf6, 0x62, 0xd0, 0xbb, 0x42,
	0x11, 0x2b, 0x03, 0xf4, 0x63, 0x58, 0x08, 0x64, 0xe6, 0x6a, 0xd6, 0x95, 0xf1, 0xdd, 0xc1, 0x91,
	0x6a, 0x8c, 0x33, 0x48, 0xc1, 0x59, 0x7e, 0x5a, 0x9c, 0x21, 0xc8, 0xd2, 0x90, 0xf4, 0xca, 0x4b,
	0xd2, 0x09, 0x7f, 0x36, 0xa8, 0x28, 0xf2, 0xf0, 0xba, 0xdf, 0x47, 0x55, 0xc8, 0x0a, 0x40, 0x68,
	0x63, 0xd3, 0x52, 0xed, 0xc0, 0x42, 0x0f, 0x6d, 0x41, 0xd6, 0x22, 0x21, 0x51, 0xf7, 0xb4, 0x4f,
	0xd2, 0xf5, 0xb1, 0xd0, 0x31, 0x7a, 0x90, 0x8b, 0xd0, 0x84, 0x9e, 0x0d, 0xc5, 0x99, 0x08, 0x3c,
	0x19, 0x0c, 0x25, 0x82, 0x15, 0xa4, 0xd3, 0xd4, 0x7a, 0xf6, 0x61, 0xe9, 0x84, 0x05, 0x61, 0x93,
	0x78, 0x01, 0xa6, 0xbf, 0xbc, 0xa6, 0x41, 0xc8, 0x09, 0x21, 0xbe, 0x8f, 0x96, 0x46, 0x09, 0x41,
	0xf6, 0x89, 0x5f, 0x3e, 0x39, 0x2b, 0x61, 0xa1, 0x69, 0x1c, 0x80, 0x3e, 0x70, 0x12, 0x78, 0xae,
	0x13, 0x70, 0x5a, 0x99, 0x63, 0x21, 0xb5, 0x83, 0xb2, 0x26, 0xae, 0xe5, 0x63, 0xda, 0xc3, 0x1b,
	0x89, 0xa5, 0xa2, 0x51, 0x85, 0x95, 0x3d, 0x12, 0x76, 0x2f, 0x8f, 0xe8, 0x50, 0x3a, 0xeb, 0xb0,
	0x20, 0xcf, 0x40, 0xe9, 0x6a, 0x11, 0xcf, 0xdb, 0xfc, 0xf8, 0x0b, 0x0c, 0x07, 0x56, 0x87, 0xf5,
	0x3f, 0x36, 0x32, 0xfa, 0x1c, 0x4a, 0x17, 0x84, 0xf5, 0xe3, 0xd3, 0x96, 0xc3, 0x94, 0x47, 0x2a,
	0x48, 0x69, 0x53, 0xc6, 0xfb, 0xb3, 0x06, 0x8b, 0xfb, 0x3e, 0x25, 0x21, 0xe5, 0x4c, 0x36, 0x0a,
	0xf1, 0x04, 0x4e, 0x67, 0xa7, 0xc7, 0xe9, 0x26, 0x64, 0x6c, 0xe2, 0x29, 0x64, 0x8f, 0x83, 0x04,
	0x57, 0xe1, 0x04, 0x2b, 0x49, 0x48, 0x8c, 0x35, 0x2b, 0xc6, 0x2a, 0x39, 0x46, 0x7c, 0x6f, 0x3d,
	0xe3, 0x5d, 0xe2, 0x47, 0x04, 0x27, 0x5f, 0x5e, 0xf6, 0xbd, 0x54, 0x67, 0x5c, 0x03, 0x47, 0x9a,
	0xc6, 0x1b, 0x58, 0x7c, 0xe9, 0x59, 0xaa, 0xa0, 0x08, 0x1d, 0xda, 0x00, 0x1d, 0x68, 0x0d, 0xe6,
	0xd5, 0xfd, 0x43, 0x9e, 0x1a, 0x73, 0xa2, 0xf5, 0xd3, 0x67, 0x6d, 0x04, 0xa0, 0xc7, 0x11, 0xce,
	0x06, 0x7b, 0x73, 0xda, 0x40, 0x1f, 0xb5, 0xf9, 0x0d, 0x07, 0x4a, 0x71, 0x50, 0xb9, 0x85, 0x7e,
	0x40, 0xc8, 0xa7, 0x30, 0x27, 0xba, 0xaa, 0x02, 0xde, 0xbf, 0x63, 0xbb, 0x61, 0xa9, 0x69, 0x1c,
	0xc0, 0x52, 0x1c, 0x2f, 0x68, 0xfb, 0x16, 0xf5, 0x13, 0xce, 0xb5, 0xa4, 0xf3, 0x4a, 0xe2, 0xe4,
	0x9a, 0x95, 0xb7, 0xeb, 0x68, 0x6d, 0xfc, 0x2a, 0x03, 0xcb, 0xfb, 0x97, 0xfc, 0xc3, 0x29, 0x89,
	0xfe, 0xaf, 0x61, 0xa1, 0x2b, 0x30, 0x67, 0x29, 0x38, 0xa7, 0xed, 0xc7, 0x18, 0x95, 0x38, 0x52,
	0xe6, 0x76, 0xd7, 0x22, 0x27, 0x4b, 0x60, 0x39, 0xdd, 0x2e, 0xce, 0x1a, 0x47, 0xca, 0xfc, 0x93,
	0xd7, 0xa7, 0xb6, 0x7b, 0x43, 0x2d, 0x75, 0x8e, 0x44, 0x4b, 0x74, 0x02, 0x4b, 0x4a, 0xc9, 0x8c,
	0x66, 0x92, 0x15, 0x9e, 0x1f, 0xdd, 0xe5, 0x39, 0x1a, 0x4e, 0x49, 0xd9, 0x46, 0x20, 0x38, 0x86,
	0x48, 0x62, 0x8a, 0x26, 0x46, 0xb0, 0x7d, 0x78, 0x97, 0x33, 0xd9, 0xf5, 0xa2, 0x32, 0x14, 0xab,
	0x00, 0x35, 0x06, 0x9e, 0x5c, 0xde, 0xfb, 0xa0, 0x3c, 0x2f, 0x3c, 0x19, 0x77, 0x79, 0x92, 0x63,
	0x8a, 0x5d, 0x89, 0x55, 0x60, 0xac, 0x02, 0x4a, 0x4e, 0x40, 0xf2, 0x89, 0xf1, 0x25, 0x20, 0x49,
	0x31, 0x32, 0xbc, 0x1a, 0x4c, 0xfa, 0x84, 0x8d, 0x63, 0x58, 0x19, 0x52, 0x56, 0x9c, 0x14, 0xa3,
	0x4a, 0x9b, 0x1a, 0x55, 0x5b, 0xb0, 0x2c, 0x3c, 0x89, 0xad, 0x3a, 0x21, 0xea, 0x1f, 0x35, 0x95,
	0xa3, 0x52, 0x56, 0x51, 0x4f, 0x06, 0xa4, 0x20, 0xc1, 0xb3, 0x9d, 0x12, 0xf7, 0x43, 0x3b, 0xc5,
	0x13, 0x41, 0xdd, 0x09, 0xfd, 0xdb, 0x98, 0x2d, 0x2a, 0x2f, 0xf9, 0x95, 0x73, 0xf0, 0x02, 0xe9,
	0x90, 0x19, 0x7c, 0xa0, 0xf3, 0x47, 0x54, 0x83, 0xb9, 0x1b, 0xd2, 0xbf, 0xa6, 0x8a, 0x01, 0xef,
	0xa0, 0x20, 0xa9, 0xb7, 0x33, 0xfb, 0x8d, 0x66, 0x5c, 0x43, 0x31, 0x1a, 0x8b, 0x70, 0x3e, 0x6e,
	0xef, 0x3c, 0x1b, 0x45, 0xf4, 0x5d, 0x0c, 0x37, 0x11, 0xce, 0x06, 0x86, 0xd5, 0xa1, 0xb0, 0x51,
	0x87, 0x77, 0x60, 0xa1, 0x2b, 0x30, 0x10, 0x6d, 0xb8, 0x8d, 0x3b, 0x70, 0x24, 0x2d, 0x23, 0x03,
	0x63, 0x1d, 0xd6, 0x46, 0x7c, 0x2a, 0x08, 0x85, 0x70, 0x4f, 0x9d, 0x52, 0x7b, 0xb7, 0xf1, 0x77,
	0xc9, 0x47, 0x9f, 0xb7, 0x53, 0x7e, 0x9c, 0x19, 0x2d, 0xa8, 0xa4, 0x45, 0xfd, 0xd8, 0x63, 0x72,
	0xeb, 0x29, 0xe4, 0xa2, 0x1b, 0x12, 0xff, 0xa2, 0x6d, 0xee, 0x9e, 0x9a, 0x9d, 0xd7, 0xa7, 0x75,
	0x13, 0xef, 0x9e, 0x75, 0xea, 0x58, 0x9f, 0xe1, 0x1f, 0xc3, 0xb1, 0xf0, 0xa8, 0xde, 0xd6, 0xb5,
	0xad, 0x6f, 0x60, 0x31, 0x4e, 0x1e, 0xad, 0xc3, 0xca, 0xab, 0x46, 0xfd, 0xe7, 0x66, 0xb3, 0x7d,
	0x50, 0x37, 0xdb, 0xad, 0x93, 0xd7, 0x66, 0xb3, 0xde, 0xd9, 0xd5, 0x67, 0xf8, 0x27, 0xf3, 0xe0,
	0xc5, 0xe1, 0xcb, 0x93, 0x13, 0x5d, 0xdb, 0xfe, 0xd7, 0x3c, 0xc0, 0xe0, 0x27, 0x64, 0x44, 0x21,
	0x17, 0x5d, 0x31, 0x50, 0xda, 0xce, 0x1e, 0xb9, 0xc4, 0x54, 0x1e, 0xdd, 0xa9, 0xa3, 0xc6, 0xa2,
	0xff, 0xfa, 0x2f, 0xff, 0xf8, 0xdd, 0x2c, 0xa0, 0x5c, 0xed, 0xe6, 0xa9, 0xf8, 0xd1, 0x1a, 0xbd,
	0x87, 0x42, 0xf2, 0x4e, 0x81, 0xd2, 0x3e, 0xd7, 0x52, 0x2e, 0x29, 0x95, 0x27, 0x13, 0xf5, 0x54,
	0xc8, 0x7b, 0x22, 0xe4, 0x0a, 0x5a, 0x8e, 0x42, 0xee, 0x9c, 0x2b, 0x35, 0x74, 0x0d, 0x30, 0x60,
	0x1f, 0xf4, 0x79, 0x1a, 0xcf, 0x8f, 0x1e, 0x0f, 0x95, 0xc7, 0x13, 0xb4, 0x54, 0xd4, 0x8a, 0x88,
	0xba, 0x6a, 0x2c, 0xc5, 0x51, 0x25, 0x64, 0x77, 0xb4, 0x2d, 0x14, 0x42, 0x3e, 0xc1, 0x58, 0xe8,
	0xf1, 0x38, 0x8a, 0x18, 0xa2, 0xbf, 0xca, 0x17, 0x93, 0xd4, 0x54, 0xe4, 0x4f, 0x44, 0x64, 0x1d,
	0x95, 0xa2, 0xc8, 0x35, 0xc1, 0x6e, 0x28, 0x00, 0x18, 0x10, 0x4f, 0x6a, 0xb1, 0x1f, 0x90, 0x5f,
	0xe5, 0xf1, 0x54, 0xec, 0x65, 0x94, 0x45, 0x48, 0x84, 0xf4, 0x38, 0xa4, 0x62, 0x30, 0xf4, 0x1b,
	0x6d, 0x94, 0x6b, 0x9e, 0x4c, 0xdc, 0xdc, 0x2a, 0xf6, 0xe6, 0x64, 0x45, 0x15, 0xde, 0x10, 0xe1,
	0x3f, 0x35, 0xd6, 0x47, 0xc3, 0xef, 0x48, 0x52, 0xe2, 0x3d, 0xff, 0x6d, 0xc4, 0xd7, 0x43, 0x5b,
	0x13, 0xfd, 0xff, 0xd8, 0xa6, 0xa6, 0xf0, 0x46, 0xe5, 0xab, 0x29, 0xb5, 0x55, 0x5e, 0x0f, 0x44,
	0x5e, 0xf7, 0x50, 0x9c, 0xd7, 0x4e, 0x8f, 0x86, 0x09, 0xc5, 0xbd, 0x87, 0xdf, 0x3f, 0x38, 0x67,
	0xe1, 0xf9, 0x75, 0xf7, 0x8a, 0x86, 0x55, 0xd7, 0xef, 0xd5, 0x76, 0x47, 0xff, 0xd3, 0x39, 0x9f,
	0x17, 0x7f, 0xa0, 0x3c, 0xfb, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf5, 0x6b, 0xdc, 0xc7, 0xef,
	0x19, 0x00, 0x00,
}
