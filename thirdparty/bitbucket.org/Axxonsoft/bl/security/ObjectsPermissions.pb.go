// Code generated by protoc-gen-go. DO NOT EDIT.
// source: axxonsoft/bl/security/ObjectsPermissions.proto

package security // import "bitbucket.org/Axxonsoft/bl/security"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ECameraAccess int32

const (
	ECameraAccess_CAMERA_ACCESS_UNSPECIFIED               ECameraAccess = 0
	ECameraAccess_CAMERA_ACCESS_FORBID                    ECameraAccess = 10
	ECameraAccess_CAMERA_ACCESS_ONLY_ARCHIVE              ECameraAccess = 15
	ECameraAccess_CAMERA_ACCESS_MONITORING_ON_PROTECTION  ECameraAccess = 20
	ECameraAccess_CAMERA_ACCESS_MONITORING                ECameraAccess = 30
	ECameraAccess_CAMERA_ACCESS_ARCHIVE                   ECameraAccess = 40
	ECameraAccess_CAMERA_ACCESS_MONITORING_ARCHIVE_MANAGE ECameraAccess = 50
	ECameraAccess_CAMERA_ACCESS_FULL                      ECameraAccess = 60
)

var ECameraAccess_name = map[int32]string{
	0:  "CAMERA_ACCESS_UNSPECIFIED",
	10: "CAMERA_ACCESS_FORBID",
	15: "CAMERA_ACCESS_ONLY_ARCHIVE",
	20: "CAMERA_ACCESS_MONITORING_ON_PROTECTION",
	30: "CAMERA_ACCESS_MONITORING",
	40: "CAMERA_ACCESS_ARCHIVE",
	50: "CAMERA_ACCESS_MONITORING_ARCHIVE_MANAGE",
	60: "CAMERA_ACCESS_FULL",
}
var ECameraAccess_value = map[string]int32{
	"CAMERA_ACCESS_UNSPECIFIED":               0,
	"CAMERA_ACCESS_FORBID":                    10,
	"CAMERA_ACCESS_ONLY_ARCHIVE":              15,
	"CAMERA_ACCESS_MONITORING_ON_PROTECTION":  20,
	"CAMERA_ACCESS_MONITORING":                30,
	"CAMERA_ACCESS_ARCHIVE":                   40,
	"CAMERA_ACCESS_MONITORING_ARCHIVE_MANAGE": 50,
	"CAMERA_ACCESS_FULL":                      60,
}

func (x ECameraAccess) String() string {
	return proto.EnumName(ECameraAccess_name, int32(x))
}
func (ECameraAccess) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ObjectsPermissions_14d4e607884ad3c8, []int{0}
}

type EMicrophoneAccess int32

const (
	EMicrophoneAccess_MICROPHONE_ACCESS_UNSPECIFIED EMicrophoneAccess = 0
	EMicrophoneAccess_MICROPHONE_ACCESS_FORBID      EMicrophoneAccess = 10
	EMicrophoneAccess_MICROPHONE_ACCESS_MONITORING  EMicrophoneAccess = 20
	EMicrophoneAccess_MICROPHONE_ACCESS_FULL        EMicrophoneAccess = 30
)

var EMicrophoneAccess_name = map[int32]string{
	0:  "MICROPHONE_ACCESS_UNSPECIFIED",
	10: "MICROPHONE_ACCESS_FORBID",
	20: "MICROPHONE_ACCESS_MONITORING",
	30: "MICROPHONE_ACCESS_FULL",
}
var EMicrophoneAccess_value = map[string]int32{
	"MICROPHONE_ACCESS_UNSPECIFIED": 0,
	"MICROPHONE_ACCESS_FORBID":      10,
	"MICROPHONE_ACCESS_MONITORING":  20,
	"MICROPHONE_ACCESS_FULL":        30,
}

func (x EMicrophoneAccess) String() string {
	return proto.EnumName(EMicrophoneAccess_name, int32(x))
}
func (EMicrophoneAccess) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ObjectsPermissions_14d4e607884ad3c8, []int{1}
}

type ETelemetryPriority int32

const (
	// Not specified.
	ETelemetryPriority_TELEMETRY_PRIORITY_UNSPECIFIED ETelemetryPriority = 0
	ETelemetryPriority_TELEMETRY_PRIORITY_HIGHEST     ETelemetryPriority = 100
	ETelemetryPriority_TELEMETRY_PRIORITY_HIGH        ETelemetryPriority = 200
	ETelemetryPriority_TELEMETRY_PRIORITY_NORMAL      ETelemetryPriority = 300
	ETelemetryPriority_TELEMETRY_PRIORITY_LOW         ETelemetryPriority = 400
	ETelemetryPriority_TELEMETRY_PRIORITY_LOWEST      ETelemetryPriority = 500
	ETelemetryPriority_TELEMETRY_PRIORITY_NO_ACCESS   ETelemetryPriority = 1000
)

var ETelemetryPriority_name = map[int32]string{
	0:    "TELEMETRY_PRIORITY_UNSPECIFIED",
	100:  "TELEMETRY_PRIORITY_HIGHEST",
	200:  "TELEMETRY_PRIORITY_HIGH",
	300:  "TELEMETRY_PRIORITY_NORMAL",
	400:  "TELEMETRY_PRIORITY_LOW",
	500:  "TELEMETRY_PRIORITY_LOWEST",
	1000: "TELEMETRY_PRIORITY_NO_ACCESS",
}
var ETelemetryPriority_value = map[string]int32{
	"TELEMETRY_PRIORITY_UNSPECIFIED": 0,
	"TELEMETRY_PRIORITY_HIGHEST":     100,
	"TELEMETRY_PRIORITY_HIGH":        200,
	"TELEMETRY_PRIORITY_NORMAL":      300,
	"TELEMETRY_PRIORITY_LOW":         400,
	"TELEMETRY_PRIORITY_LOWEST":      500,
	"TELEMETRY_PRIORITY_NO_ACCESS":   1000,
}

func (x ETelemetryPriority) String() string {
	return proto.EnumName(ETelemetryPriority_name, int32(x))
}
func (ETelemetryPriority) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ObjectsPermissions_14d4e607884ad3c8, []int{2}
}

type EArchiveAccess int32

const (
	EArchiveAccess_ARCHIVE_ACCESS_UNSPECIFIED EArchiveAccess = 0
	EArchiveAccess_ARCHIVE_ACCESS_FORBID      EArchiveAccess = 10
	EArchiveAccess_ARCHIVE_ACCESS_FULL        EArchiveAccess = 20
)

var EArchiveAccess_name = map[int32]string{
	0:  "ARCHIVE_ACCESS_UNSPECIFIED",
	10: "ARCHIVE_ACCESS_FORBID",
	20: "ARCHIVE_ACCESS_FULL",
}
var EArchiveAccess_value = map[string]int32{
	"ARCHIVE_ACCESS_UNSPECIFIED": 0,
	"ARCHIVE_ACCESS_FORBID":      10,
	"ARCHIVE_ACCESS_FULL":        20,
}

func (x EArchiveAccess) String() string {
	return proto.EnumName(EArchiveAccess_name, int32(x))
}
func (EArchiveAccess) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ObjectsPermissions_14d4e607884ad3c8, []int{3}
}

type EVideowallAccess int32

const (
	EVideowallAccess_VIDEOWALL_ACCESS_UNSPECIFIED EVideowallAccess = 0
	EVideowallAccess_VIDEOWALL_ACCESS_FORBID      EVideowallAccess = 10
	EVideowallAccess_VIDEOWALL_ACCESS_FULL        EVideowallAccess = 20
)

var EVideowallAccess_name = map[int32]string{
	0:  "VIDEOWALL_ACCESS_UNSPECIFIED",
	10: "VIDEOWALL_ACCESS_FORBID",
	20: "VIDEOWALL_ACCESS_FULL",
}
var EVideowallAccess_value = map[string]int32{
	"VIDEOWALL_ACCESS_UNSPECIFIED": 0,
	"VIDEOWALL_ACCESS_FORBID":      10,
	"VIDEOWALL_ACCESS_FULL":        20,
}

func (x EVideowallAccess) String() string {
	return proto.EnumName(EVideowallAccess_name, int32(x))
}
func (EVideowallAccess) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ObjectsPermissions_14d4e607884ad3c8, []int{4}
}

type EMacrosAccess int32

const (
	EMacrosAccess_MACROS_ACCESS_UNSPECIFIED EMacrosAccess = 0
	EMacrosAccess_MACROS_ACCESS_FORBID      EMacrosAccess = 10
	EMacrosAccess_MACROS_ACCESS_FULL        EMacrosAccess = 1000
)

var EMacrosAccess_name = map[int32]string{
	0:    "MACROS_ACCESS_UNSPECIFIED",
	10:   "MACROS_ACCESS_FORBID",
	1000: "MACROS_ACCESS_FULL",
}
var EMacrosAccess_value = map[string]int32{
	"MACROS_ACCESS_UNSPECIFIED": 0,
	"MACROS_ACCESS_FORBID":      10,
	"MACROS_ACCESS_FULL":        1000,
}

func (x EMacrosAccess) String() string {
	return proto.EnumName(EMacrosAccess_name, int32(x))
}
func (EMacrosAccess) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ObjectsPermissions_14d4e607884ad3c8, []int{5}
}

// Represents single role permissions.
type ObjectsPermissions struct {
	// maps objects id's to camera permissions
	CameraAccess map[string]ECameraAccess `protobuf:"bytes,1,rep,name=camera_access,json=cameraAccess" json:"camera_access,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=axxonsoft.bl.security.ECameraAccess"`
	// maps objects id's to mic permissions
	MicrophoneAccess map[string]EMicrophoneAccess `protobuf:"bytes,2,rep,name=microphone_access,json=microphoneAccess" json:"microphone_access,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=axxonsoft.bl.security.EMicrophoneAccess"`
	// maps objects id's to telemtry permissions
	TelemetryPriority map[string]ETelemetryPriority `protobuf:"bytes,3,rep,name=telemetry_priority,json=telemetryPriority" json:"telemetry_priority,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=axxonsoft.bl.security.ETelemetryPriority"`
	// maps objects id's to archive permissions
	ArchiveAccess map[string]EArchiveAccess `protobuf:"bytes,4,rep,name=archive_access,json=archiveAccess" json:"archive_access,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=axxonsoft.bl.security.EArchiveAccess"`
	// maps objects id's to videowall permissions
	VideowallAccess      map[string]EVideowallAccess `protobuf:"bytes,5,rep,name=videowall_access,json=videowallAccess" json:"videowall_access,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=axxonsoft.bl.security.EVideowallAccess"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *ObjectsPermissions) Reset()         { *m = ObjectsPermissions{} }
func (m *ObjectsPermissions) String() string { return proto.CompactTextString(m) }
func (*ObjectsPermissions) ProtoMessage()    {}
func (*ObjectsPermissions) Descriptor() ([]byte, []int) {
	return fileDescriptor_ObjectsPermissions_14d4e607884ad3c8, []int{0}
}
func (m *ObjectsPermissions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObjectsPermissions.Unmarshal(m, b)
}
func (m *ObjectsPermissions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObjectsPermissions.Marshal(b, m, deterministic)
}
func (dst *ObjectsPermissions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectsPermissions.Merge(dst, src)
}
func (m *ObjectsPermissions) XXX_Size() int {
	return xxx_messageInfo_ObjectsPermissions.Size(m)
}
func (m *ObjectsPermissions) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectsPermissions.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectsPermissions proto.InternalMessageInfo

func (m *ObjectsPermissions) GetCameraAccess() map[string]ECameraAccess {
	if m != nil {
		return m.CameraAccess
	}
	return nil
}

func (m *ObjectsPermissions) GetMicrophoneAccess() map[string]EMicrophoneAccess {
	if m != nil {
		return m.MicrophoneAccess
	}
	return nil
}

func (m *ObjectsPermissions) GetTelemetryPriority() map[string]ETelemetryPriority {
	if m != nil {
		return m.TelemetryPriority
	}
	return nil
}

func (m *ObjectsPermissions) GetArchiveAccess() map[string]EArchiveAccess {
	if m != nil {
		return m.ArchiveAccess
	}
	return nil
}

func (m *ObjectsPermissions) GetVideowallAccess() map[string]EVideowallAccess {
	if m != nil {
		return m.VideowallAccess
	}
	return nil
}

func init() {
	proto.RegisterType((*ObjectsPermissions)(nil), "axxonsoft.bl.security.ObjectsPermissions")
	proto.RegisterMapType((map[string]EArchiveAccess)(nil), "axxonsoft.bl.security.ObjectsPermissions.ArchiveAccessEntry")
	proto.RegisterMapType((map[string]ECameraAccess)(nil), "axxonsoft.bl.security.ObjectsPermissions.CameraAccessEntry")
	proto.RegisterMapType((map[string]EMicrophoneAccess)(nil), "axxonsoft.bl.security.ObjectsPermissions.MicrophoneAccessEntry")
	proto.RegisterMapType((map[string]ETelemetryPriority)(nil), "axxonsoft.bl.security.ObjectsPermissions.TelemetryPriorityEntry")
	proto.RegisterMapType((map[string]EVideowallAccess)(nil), "axxonsoft.bl.security.ObjectsPermissions.VideowallAccessEntry")
	proto.RegisterEnum("axxonsoft.bl.security.ECameraAccess", ECameraAccess_name, ECameraAccess_value)
	proto.RegisterEnum("axxonsoft.bl.security.EMicrophoneAccess", EMicrophoneAccess_name, EMicrophoneAccess_value)
	proto.RegisterEnum("axxonsoft.bl.security.ETelemetryPriority", ETelemetryPriority_name, ETelemetryPriority_value)
	proto.RegisterEnum("axxonsoft.bl.security.EArchiveAccess", EArchiveAccess_name, EArchiveAccess_value)
	proto.RegisterEnum("axxonsoft.bl.security.EVideowallAccess", EVideowallAccess_name, EVideowallAccess_value)
	proto.RegisterEnum("axxonsoft.bl.security.EMacrosAccess", EMacrosAccess_name, EMacrosAccess_value)
}

func init() {
	proto.RegisterFile("axxonsoft/bl/security/ObjectsPermissions.proto", fileDescriptor_ObjectsPermissions_14d4e607884ad3c8)
}

var fileDescriptor_ObjectsPermissions_14d4e607884ad3c8 = []byte{
	// 765 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x96, 0x5f, 0x6e, 0xea, 0x46,
	0x14, 0xc6, 0x6b, 0xe8, 0xed, 0x6d, 0x4f, 0x4b, 0xee, 0x30, 0x05, 0x02, 0x5c, 0x2e, 0x22, 0x69,
	0xd3, 0x50, 0x2a, 0x81, 0x94, 0xbe, 0x54, 0x49, 0x9a, 0xd4, 0x71, 0x26, 0xc1, 0x92, 0xed, 0x41,
	0xc6, 0x49, 0x94, 0xbe, 0xb8, 0xc6, 0x71, 0x13, 0x37, 0x06, 0x47, 0xb6, 0x43, 0xc3, 0x2e, 0xaa,
	0xac, 0xa3, 0xab, 0xe8, 0x53, 0x97, 0x92, 0x05, 0x54, 0x7d, 0xae, 0x0c, 0x81, 0xfa, 0xcf, 0x58,
	0xe2, 0x0d, 0x9d, 0xef, 0x9c, 0xef, 0x37, 0x67, 0x3e, 0x46, 0x32, 0x74, 0x8d, 0xa7, 0x27, 0x77,
	0xe2, 0xbb, 0xbf, 0x06, 0xbd, 0x91, 0xd3, 0xf3, 0x2d, 0xf3, 0xd1, 0xb3, 0x83, 0x59, 0x8f, 0x8e,
	0x7e, 0xb3, 0xcc, 0xc0, 0x1f, 0x58, 0xde, 0xd8, 0xf6, 0x7d, 0xdb, 0x9d, 0xf8, 0xdd, 0x07, 0xcf,
	0x0d, 0x5c, 0x5c, 0x5e, 0xf5, 0x77, 0x47, 0x4e, 0x77, 0xd9, 0xbf, 0xfd, 0xd7, 0xa7, 0x80, 0xd3,
	0x33, 0xf8, 0x17, 0x28, 0x98, 0xc6, 0xd8, 0xf2, 0x0c, 0xdd, 0x30, 0x4d, 0xcb, 0xf7, 0xab, 0x5c,
	0x2b, 0xdf, 0xfe, 0x7c, 0xef, 0xa0, 0xcb, 0x74, 0xe9, 0x32, 0xa8, 0xc2, 0x7c, 0x9c, 0x9f, 0x4f,
	0x93, 0x49, 0xe0, 0xcd, 0xd4, 0x2f, 0xcc, 0x48, 0x09, 0x3b, 0x50, 0x1c, 0xdb, 0xa6, 0xe7, 0x3e,
	0xdc, 0xb9, 0x13, 0x6b, 0x49, 0xc9, 0xcd, 0x29, 0xc7, 0xeb, 0x53, 0xe4, 0x95, 0x45, 0x94, 0x84,
	0xc6, 0x89, 0x32, 0x76, 0x01, 0x07, 0x96, 0x63, 0x8d, 0xad, 0xc0, 0x9b, 0xe9, 0x0f, 0x9e, 0xed,
	0x86, 0x86, 0xd5, 0xfc, 0x1c, 0xf7, 0xd3, 0xfa, 0x38, 0x6d, 0xe9, 0x31, 0x78, 0xb5, 0x58, 0xf0,
	0x8a, 0x41, 0xb2, 0x8e, 0x4d, 0xd8, 0x30, 0x3c, 0xf3, 0xce, 0x9e, 0xae, 0x76, 0xfb, 0x78, 0x0e,
	0x3b, 0x5c, 0x1f, 0xc6, 0x2f, 0xe6, 0xa3, 0x8b, 0x15, 0x8c, 0x68, 0x0d, 0xdb, 0x80, 0xa6, 0xf6,
	0x8d, 0xe5, 0xfe, 0x6e, 0x38, 0xce, 0x12, 0xf3, 0x66, 0x8e, 0x39, 0x5a, 0x1f, 0x73, 0xb9, 0x74,
	0x88, 0x82, 0xde, 0x4d, 0xe3, 0xd5, 0xba, 0x05, 0xc5, 0x54, 0xa2, 0x18, 0x41, 0xfe, 0xde, 0x9a,
	0x55, 0xb9, 0x16, 0xd7, 0xfe, 0x4c, 0x0d, 0x7f, 0xe2, 0x7d, 0x78, 0x33, 0x35, 0x9c, 0x47, 0xab,
	0x9a, 0x6b, 0x71, 0xed, 0x8d, 0xbd, 0xaf, 0x33, 0x8e, 0x41, 0xa2, 0x5e, 0xea, 0x62, 0x64, 0x3f,
	0xf7, 0x03, 0x57, 0x1f, 0x43, 0x99, 0x19, 0x29, 0x03, 0x75, 0x14, 0x47, 0xb5, 0xb3, 0x50, 0x49,
	0xbf, 0x28, 0xce, 0x85, 0x0a, 0x3b, 0x52, 0x06, 0xef, 0x38, 0xce, 0xfb, 0x36, 0x8b, 0x97, 0x32,
	0x8c, 0x02, 0x6f, 0x01, 0xa7, 0x63, 0x65, 0xc0, 0x0e, 0xe2, 0xb0, 0x9d, 0x2c, 0x58, 0xcc, 0x2c,
	0x0a, 0xba, 0x87, 0x12, 0x2b, 0x58, 0x06, 0xea, 0xc7, 0x38, 0x6a, 0x37, 0x0b, 0x95, 0xb0, 0x8b,
	0xc0, 0x3a, 0xcf, 0x39, 0x28, 0xc4, 0x22, 0xc5, 0x1f, 0xa0, 0x26, 0xf0, 0x32, 0x51, 0x79, 0x9d,
	0x17, 0x04, 0x32, 0x1c, 0xea, 0x17, 0xca, 0x70, 0x40, 0x04, 0xf1, 0x4c, 0x24, 0xa7, 0xe8, 0x23,
	0x5c, 0x85, 0x52, 0x5c, 0x3e, 0xa3, 0xea, 0x89, 0x78, 0x8a, 0x00, 0x37, 0xa1, 0x1e, 0x57, 0xa8,
	0x22, 0x5d, 0xeb, 0xbc, 0x2a, 0xf4, 0xc5, 0x4b, 0x82, 0xde, 0xe1, 0x0e, 0x7c, 0x13, 0xd7, 0x65,
	0xaa, 0x88, 0x1a, 0x55, 0x45, 0xe5, 0x5c, 0xa7, 0x8a, 0x3e, 0x50, 0xa9, 0x46, 0x04, 0x4d, 0xa4,
	0x0a, 0x2a, 0xe1, 0x06, 0x54, 0xb3, 0x7a, 0x51, 0x13, 0xd7, 0xa0, 0x1c, 0x57, 0x97, 0x90, 0x36,
	0xfe, 0x0e, 0x76, 0x33, 0x21, 0xaf, 0x5d, 0xba, 0xcc, 0x2b, 0xfc, 0x39, 0x41, 0x7b, 0xb8, 0x02,
	0x38, 0xb1, 0xcb, 0x85, 0x24, 0xa1, 0xc3, 0xce, 0x33, 0x07, 0xc5, 0xd4, 0x9f, 0x0f, 0x6f, 0xc1,
	0x07, 0x59, 0x14, 0x54, 0x3a, 0xe8, 0x53, 0x85, 0xb0, 0x2f, 0xa7, 0x01, 0xd5, 0x74, 0xcb, 0xea,
	0x82, 0x5a, 0xd0, 0x48, 0xab, 0x91, 0xc5, 0x4a, 0xb8, 0x0e, 0x15, 0xc6, 0x7c, 0x78, 0xa8, 0x66,
	0xe7, 0x5f, 0x0e, 0x70, 0xfa, 0x1f, 0x8a, 0xb7, 0xa1, 0xa9, 0x11, 0x89, 0xc8, 0x44, 0x53, 0xaf,
	0xf5, 0x81, 0x2a, 0x52, 0x55, 0xd4, 0xae, 0x13, 0xc7, 0x6a, 0x42, 0x9d, 0xd1, 0xd3, 0x17, 0xcf,
	0xfb, 0x64, 0xa8, 0xa1, 0x1b, 0xdc, 0x80, 0xcd, 0x0c, 0x1d, 0xfd, 0xcd, 0xe1, 0x26, 0xd4, 0x18,
	0xaa, 0x42, 0x55, 0x99, 0x97, 0xd0, 0x9f, 0x39, 0xfc, 0x1e, 0x2a, 0x0c, 0x5d, 0xa2, 0x57, 0xe8,
	0x8f, 0x7c, 0xc6, 0xb0, 0x44, 0xaf, 0x42, 0xf2, 0x3f, 0x79, 0xbc, 0x05, 0x0d, 0xa6, 0xf9, 0xeb,
	0xf2, 0xe8, 0xe5, 0x6d, 0xe7, 0x06, 0x36, 0xe2, 0x8f, 0x25, 0xdc, 0x67, 0x99, 0x25, 0x33, 0x86,
	0x1a, 0x94, 0x13, 0xfa, 0x2a, 0x83, 0x4d, 0xf8, 0x32, 0x29, 0x85, 0xd7, 0x5b, 0xea, 0x38, 0x80,
	0x92, 0xef, 0x24, 0x0c, 0xec, 0x52, 0x3c, 0x25, 0xf4, 0x8a, 0x97, 0x24, 0x36, 0xe9, 0x3d, 0x6c,
	0xa6, 0x3a, 0x56, 0xac, 0x1a, 0x94, 0xd3, 0xe2, 0x82, 0x66, 0x40, 0x81, 0xc8, 0x86, 0xe9, 0xb9,
	0xfe, 0xff, 0xaf, 0x4e, 0xe6, 0x05, 0x95, 0x0e, 0x33, 0x5f, 0x5d, 0x5c, 0x8e, 0x2c, 0x84, 0x13,
	0x4a, 0x48, 0x78, 0x79, 0x7b, 0xb2, 0xf3, 0xf3, 0x57, 0x23, 0x3b, 0x18, 0x3d, 0x9a, 0xf7, 0x56,
	0xd0, 0x75, 0xbd, 0xdb, 0x1e, 0xcf, 0xfa, 0xea, 0x18, 0x7d, 0x32, 0xff, 0xc6, 0xf8, 0xfe, 0xbf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x2e, 0xd2, 0xbf, 0x24, 0x95, 0x08, 0x00, 0x00,
}
